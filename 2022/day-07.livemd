<!-- livebook:{"persist_outputs":true} -->

# 2022 Advent of Code - Day X: TBD

```elixir
Mix.install([:kino, :benchee])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2022/day/7)
* [AoC Puzzle Input](https://adventofcode.com/2022/day/7/input)
* [tylerj GitHub](https://github.com/tylerj/aoc/blob/main/2022/day-07.livemd)

## Prompt

### --- Day X: TBD ---

Part One prompt

**QUESTION ONE?**

To begin, [get your puzzle input](https://adventofcode.com/2022/day/7/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

Part Two prompt

**QUESTION TWO?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2022/day/7/input).

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
"$ cd /\n$ ls\ndir a\n14848514 b.txt\n8504156 c.dat\ndir d\n$ cd a\n$ ls\ndir e\n29116 f\n2557 g\n62596 h.lst\n$ cd e\n$ ls\n584 i\n$ cd ..\n$ cd ..\n$ cd d\n$ ls\n4060174 j\n8033020 d.log\n5626152 d.ext\n7214296 k"
```

## Solution

```elixir
defmodule Day07 do
  alias __MODULE__.Directory

  defdelegate parse(input), to: __MODULE__.Input

  @dir_list %{
    "/" => Directory.init("/")
  }

  def part1(input) do
    input
    |> parse()
    |> Enum.reduce({"/", @dir_list}, &line/2)
  end

  def part2(input) do
    input
    |> parse()
    |> Enum.map(& &1)
  end

  # def line(line, {dir, %{} = directories})
  def line(:ls, acc), do: acc

  def line({:cd, ".."}, {dir, map}),
    do: {parent_name(map, dir), map}

  def line({:cd, new_dir}, {dir, map}),
    do: {dir_name([dir, new_dir]), map}

  def line({:dir, new_dir}, {dir, map}) do
    new_dir = dir_name(dir, new_dir)

    IO.inspect(dir, label: "DIR")
    IO.inspect(new_dir, label: "NEW DIR")

    {
      dir,
      map
      |> Map.update!(dir, &add_child(&1, new_dir))
      |> Map.put(new_dir, Directory.init(new_dir))
    }
  end

  def line(_, acc), do: acc

  defp add_child(dir, child) do
    Map.update!(dir, :children, &[child | &1])
  end

  defp parent_name(map, dir) do
    Map.get(map, dir).parent
  end

  defp dir_name(a, b), do: dir_name([a, b])

  defp dir_name(list) when is_list(list),
    do: Enum.join(list, "/")

  defmodule Directory do
    defstruct [:name, :parent, files: [], children: []]

    def init(name) do
      %__MODULE__{
        name: name,
        parent: parent_from_name(name)
      }
    end

    def parent_from_name("/"), do: nil

    def parent_from_name(name) do
      String.replace(name, ~r/\/[^\/]+$/, "")
    end
  end

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.split("\n")
      |> parse()
    end

    def parse(input) when is_list(input) do
      Stream.map(input, &parse_line/1)
    end

    def parse_line("$ ls"), do: :ls
    def parse_line("$ cd " <> dir), do: {:cd, dir}
    def parse_line("dir " <> dir), do: {:dir, dir}

    def parse_line(file) do
      with [size, name] <- String.split(file, " ") do
        {:file, name, String.to_integer(size)}
      end
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day07, <<70, 79, 82, 49, 0, 0, 16, ...>>,
 {:module, Day07.Input, <<70, 79, 82, ...>>, {:parse_line, 1}}}
```

```elixir
Day07.part1(input)
```

<!-- livebook:{"output":true} -->

```
DIR: "///"
NEW DIR: "////a"
```

```elixir
Day07.Directory.init("/")
```

<!-- livebook:{"output":true} -->

```
%Day07.Directory{name: "/", parent: "/", files: [], children: []}
```

```elixir
Day07.Input.parse(input) |> Enum.to_list()
```

<!-- livebook:{"output":true} -->

```
[
  {:cd, "/"},
  :ls,
  {:dir, "a"},
  {:file, "b.txt", 14848514},
  {:file, "c.dat", 8504156},
  {:dir, "d"},
  {:cd, "a"},
  :ls,
  {:dir, "e"},
  {:file, "f", 29116},
  {:file, "g", 2557},
  {:file, "h.lst", 62596},
  {:cd, "e"},
  :ls,
  {:file, "i", 584},
  {:cd, ".."},
  {:cd, ".."},
  {:cd, "d"},
  :ls,
  {:file, "j", 4060174},
  {:file, "d.log", 8033020},
  {:file, "d.ext", 5626152},
  {:file, "k", 7214296}
]
```

**QUESTION ONE?**

Your puzzle answer was `answer one`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day07.part1(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

**QUESTION TWO?**

Your puzzle answer was `answer two`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day07.part1(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2022) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2022/day/7/input).

## Benchmarking

```elixir
defmodule Benchmark do
  def fun1(input) do
    Day07.part1(input)
  end

  def fun2(input) do
    Day07.part2(input)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Benchmark, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:fun2, 1}}
```

```elixir
# https://github.com/bencheeorg/benchee
input = Day07.Input.parse(input) |> Enum.to_list()

Benchee.run(
  %{
    "fun1" => fn _ -> Benchmark.fun1(input) end,
    "fun2" => fn _ -> Benchmark.fun2(input) end
  },
  inputs: %{
    "Part 1" => 1
  },
  memory_time: 2,
  reduction_time: 2
)

nil
```

<!-- livebook:{"output":true} -->

```

```

<!-- livebook:{"output":true} -->

```
nil
```

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day07Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input: ""
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day07.part1(input) == [""]
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day07.part2(input) == [""]
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 162351
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```
