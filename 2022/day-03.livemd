<!-- livebook:{"persist_outputs":true} -->

# 2022 Advent of Code - Day 3: TBD

```elixir
Mix.install([:kino])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Links

* [Advent of Code](https://adventofcode.com/2022/day/3)
* [tylerj GitHub](https://github.com/tylerj/aoc/blob/main/2022/day-03.livemd)

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
""
```

## Part 1: Prompt

To begin, [get your puzzle input](https://adventofcode.com/2022/day/3/input).

## Part 1: Solution

```elixir
defmodule Day03.Part1 do
  def call(input) when is_binary(input) do
    input
    |> String.split("\n")
    |> call()
  end

  def call(input) when is_list(input) do
    input
    |> Enum.map(& &1)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day03.Part1, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:call, 1}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day03.Part1.call(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day03Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input: ""
    ]
  end

  describe "Part1.call/1" do
    test "returns expected value", %{input: input} do
      assert Day03.Part1.call(input) == [""]
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
.
Finished in 0.00 seconds (0.00s async, 0.00s sync)
1 test, 0 failures

Randomized with seed 642142
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 1}
```
