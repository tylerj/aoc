<!-- livebook:{"persist_outputs":true} -->

# Advent of Code - Day 15: Chiton

```elixir
Mix.install([:kino])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Day 15: Chiton

* [Advent of Code](https://adventofcode.com/2021/day/15)
* [tylerj GitHub](https://github.com/tylerj/aoc/blob/main/2021/day-15.livemd)
* [José Valim GitHub](https://github.com/josevalim/aoc/blob/main/2021/day-15.livemd)
* [José Valim Twitch Stream](https://www.twitch.tv/videos/1235179913?collection=k_DLnk2tvBa-fQ)

## Part One: Prompt

You've almost reached the exit of the cave, but the walls are getting closer together. Your submarine can barely still fit, though; the main problem is that the walls of the cave are covered in [chitons](https://en.wikipedia.org/wiki/Chiton), and it would be best not to bump any of them.

The cavern is large, but has a very low ceiling, restricting your motion to two dimensions. The shape of the cavern resembles a square; a quick scan of chiton density produces a map of **risk level** throughout the cave (your puzzle input). For example:

```
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581
```

You start in the top left position, your destination is the bottom right position, and you cannot move diagonally. The number at each position is its **risk level**; to determine the total risk of an entire path, add up the risk levels of each position you **enter** (that is, don't count the risk level of your starting position unless you enter it; leaving it adds no risk to your total).

Your goal is to find a path with the **lowest total risk**. In this example, a path with the lowest total risk is highlighted here:

```
1---------
1---------
2136511---
------15--
-------1--
-------13-
--------2-
--------3-
--------21
---------1
```

The total risk of this path is `40` (the starting position is never entered, so its risk is not counted).

### What is the lowest total risk of any path from the top left to the bottom right?

To begin, [get your puzzle input](https://adventofcode.com/2021/day/15/input).

## Part One: Solution

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
lines = input |> Kino.Input.read() |> String.split("\n", trim: true)
```

<!-- livebook:{"output":true} -->

```
["6489887186259823155119378351872148719812918213519649577918412241959623221389974192429139298912991367",
 "3859891261917894749518659872199265294116953513169391165342899913878588561865553734597561693917577259",
 "7821697449796196228941887781377133998193483644892699199569294366179448944296919898443894894653982299",
 "4521784638899152252884535888651941499199556787174181866459996191939865591888468793671399848719386874",
 "9191996931799877154649198443239834219617959491499995891819688991189512152374148611392199689771321748",
 "3667131999966376698925485914885119653598637984789199249717987982323518981692239229913697228977769187",
 "5913911179874379588135157927159887689932919711124715316555782223929991889593659797141392198858861889",
 "8889299854191893897698362569935143896411522526753243281794876746461747369943293918696398639953911511",
 "6463567347538215129956611194361438953389822419896312246999991693527638996861829479689711567997995192",
 "4969812254996785971152245859891328871698554194613499811274874939279976912834954128868111913733497634",
 "8715226296411979999175491771891518398174152999617899176858298421743955979312992148338161118133772495",
 "7989997198451591732186779418728991818771799995794999176147971519698195299959679496494381395415153939",
 "7282692814783299921331798173611516298898794899725789859192132379219117118492499969761658218929927864",
 "1342992871132334679195998919715589998911217792694649176999976859878194946915717791192969628795921896",
 "1198594318116525819324277961659629619194282188583741151135327827985988397249852849998274177979884659",
 "2948759488457996218881696122961499228919527561398512991239279917671118964912157265623911892599513341",
 "1721619411197179647114339866313852894794263785891972697189216816957987796466513815441999997333837393",
 "3375834591789764977977935817192389195669288849247457436183299942397325166499195293613453415691119331",
 "3383251379988789959621411392916296699995912197528691115352699418473557811621889429574876824981465367",
 "3946625971993126978662721165287737699957111997461919135155999927868159654568599845934641519931184857",
 "1814219784816784397613259195177424337829849136888218979928947895987954996239299692997891322152598969",
 "9167118929432986369621459985116955896895789531924573998849117693222897796967477579879164869645691987",
 "9993931541269456449491677911123286988879389825977278399128481297719892848811719696399852796988151918",
 "9893884365787225284723759349718218236629959279191199596535127988933911516948618826618861995591558212",
 "9984997699594184215439998946186347579842727156615585749955918144359797292171113989999655891195231226",
 "6519569284634811452859581242533679729318722199188497578918759345212444219469537986694271952662894183",
 "1673153584676797169319899939187899839683837996566397291171477988821999223881914917719626289955111858",
 "7146537276973579271975991138698798718183139181834274738682599352532928589621298131971429319935464919",
 "2911336366179694233796282699294517727951719996114927296729974248127291213748482125674817329679322278",
 "4798699184439539972938181916719984885811953923118182789714537319491196255791897212198915189411912489",
 "7852118738919181535168449598885759915381876297123897699578914948274581139887226879962581681998894469",
 "2918667954587166379414138982984796566391888998953829743959158938492499153199913868516322211627813911",
 "1911191198236791992999514989515915961526982494489934936648985927464538438395828491299233338941422537",
 "9861519197351334579955861514693812489919794188373831563893523762239644661783993119958349691911885978",
 "1741796188248628177931939945714851283262278358937917679382912284585329923948919181599981922219159783",
 "1918269993688698189196826775213217961928471115358414161749125718999932737938991944829186798198969188",
 "6335968599954929332975183965197971948118259199311892138919168279994983228145986116959153969714994791",
 "2294996932925629138737697471187317259977389438529157681417294638795539161967894892297711499619598914",
 "8621919128831831818711188658183498495415179256744899519992376961651631159967999793957467811269819598",
 "3486228927949465647719757181978926928894916813256577694958591299649458467861486232122397593137169986",
 "9195326888839115399949459765722899699729351261768612954948887622916193153198249712582629784163892915",
 "4946191927925146992288978981127654497969526715961851746313929219282191751297476541666118492999823964",
 "6687919199698953659176799913987999589192872822569891946679824579135968776766721961199575772548589916",
 "4134837613838699992499794185936511677831523879464926397999598699218495659219951997241941199797561898",
 "6261448956192268429191952813481184164439771317735498973672159429878683873947826158193518449579369192",
 "9968869557217691155988975292999388917423624394882599979257399494723919317766653218239966399782187116",
 "9966829587494189799987695999513479929199725278387418789286142795498925915831139896844459884251964868",
 "5396855967999263847161618545818977839821986999731717195938618127272182989829788669792191979169842532",
 "7411292996999993111239118429943655151416518359136297412488899595883341818989997121211198297187911377",
 "9196629191657399132973598379658919935439429224971517198796197371799969145169368359376974781195691986",
 ...]
```

```elixir
max_x = lines |> List.first() |> String.length()
max_y = lines |> length()
```

<!-- livebook:{"output":true} -->

```
100
```

```elixir
grid =
  lines
  |> Enum.with_index(1)
  |> Enum.reduce(%{}, fn {row, i}, acc ->
    row
    |> String.split("", trim: true)
    |> Enum.with_index(1)
    |> Enum.into(acc, fn {col, j} -> {{i, j}, String.to_integer(col)} end)
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  {76, 13} => 1,
  {37, 47} => 3,
  {65, 63} => 2,
  {38, 2} => 2,
  {1, 26} => 3,
  {83, 76} => 1,
  {32, 15} => 6,
  {89, 14} => 9,
  {35, 30} => 1,
  {37, 53} => 1,
  {4, 5} => 7,
  {8, 50} => 2,
  {78, 98} => 5,
  {95, 56} => 3,
  {74, 12} => 1,
  {11, 39} => 7,
  {65, 43} => 8,
  {22, 38} => 8,
  {14, 86} => 9,
  {20, 41} => 1,
  {29, 25} => 2,
  {86, 10} => 9,
  {83, 36} => 3,
  {29, 26} => 6,
  {47, 27} => 9,
  {4, 81} => 9,
  {31, 42} => 7,
  {9, 34} => 8,
  {67, 98} => 6,
  {13, 85} => 1,
  {63, 81} => 2,
  {82, 60} => 8,
  {47, 38} => 1,
  {15, 92} => 9,
  {58, 58} => 5,
  {20, 3} => 4,
  {61, 95} => 2,
  {23, 67} => 9,
  {78, 75} => 4,
  {79, 17} => 7,
  {16, 73} => 4,
  {76, 2} => 1,
  {58, 84} => 1,
  {58, 33} => 3,
  {47, 44} => 2,
  {54, 31} => 2,
  {13, 55} => 9,
  {21, 84} => 9,
  {22, ...} => 6,
  {...} => 6,
  ...
}
```

As we navigate, let's keep track of each point we've come to, and what the smallest total
(and path taken) was to get to that point.

If we're ever on a path that comes to a point that has already been seen by a smaller total, let's drop the path we're on.

```elixir
defmodule Mover do
  def navigate(%{max: max} = map) do
    if Map.get(map, max), do: map, else: do_navigate(map)
  end

  defp do_navigate(map) do
    point = next_point(map)
    sum = Map.get(map, point)

    map
    |> Map.delete(point)
    |> move(point, sum, :up)
    |> move(point, sum, :down)
    |> move(point, sum, :left)
    |> move(point, sum, :right)
    |> navigate()
  end

  defp next_point(map) do
    Enum.min_by(map, fn
      {{_, _}, v} -> v
      _ -> nil
    end)
    |> elem(0)
  end

  defp move(%{min: {_, y}} = map, {_, y}, _, :up), do: map
  defp move(%{max: {_, y}} = map, {_, y}, _, :down), do: map
  defp move(%{min: {x, _}} = map, {x, _}, _, :left), do: map
  defp move(%{max: {x, _}} = map, {x, _}, _, :right), do: map

  defp move(%{grid: grid} = map, point, sum, direction) do
    new_point = next_point(point, direction)
    new_value = Map.get(grid, new_point)

    do_move(
      map,
      new_point,
      sum + new_value,
      Map.get(map, new_point)
    )
  end

  defp do_move(map, point, sum, old_sum) when is_nil(old_sum) or old_sum > sum do
    Map.put(map, point, sum)
  end

  defp do_move(map, _, _, _), do: map

  defp next_point({x, y}, :up), do: {x, y - 1}
  defp next_point({x, y}, :down), do: {x, y + 1}
  defp next_point({x, y}, :left), do: {x - 1, y}
  defp next_point({x, y}, :right), do: {x + 1, y}
end
```

<!-- livebook:{"output":true} -->

```
{:module, Mover, <<70, 79, 82, 49, 0, 0, 15, ...>>, {:next_point, 2}}
```

```elixir
max_point = {max_x, max_y}

map = %{
  :grid => grid,
  :min => {1, 1},
  :max => max_point,
  {1, 1} => 0
}

Mover.navigate(map)
|> Map.get(max_point)
```

<!-- livebook:{"output":true} -->

```
609
```

### What is the lowest total risk of any path from the top left to the bottom right?

#### Your puzzle answer was `609`.

The first half of this puzzle is complete! It provides one gold star: *
