<!-- livebook:{"persist_outputs":true} -->

# Advent of Code - Day 7: The Treachery of Whales

```elixir
Mix.install([:kino])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Day 7: The Treachery of Whales

* [AOC Link](https://adventofcode.com/2021/day/7)
* [tylerj GitHub](https://github.com/tylerj/aoc/blob/main/2021/day-07.livemd)
* [José Valim GitHub](https://github.com/josevalim/aoc/blob/main/2021/day-07.livemd)
* José Valim Twitch Stream (N/A)

## Part One: Prompt

A giant [whale](https://en.wikipedia.org/wiki/Sperm_whale) has decided your submarine is its next meal, and it's much faster than you are. There's nowhere to run!

Suddenly, a swarm of crabs (each in its own tiny submarine - it's too deep for them otherwise) zooms in to rescue you! They seem to be preparing to blast a hole in the ocean floor; sensors indicate a **massive underground cave system** just beyond where they're aiming!

The crab submarines all need to be aligned before they'll have enough power to blast a large enough hole for your submarine to get through. However, it doesn't look like they'll be aligned before the whale catches you! Maybe you can help?

There's one major catch - crab submarines can only move horizontally.

You quickly make a list of **the horizontal position of each crab** (your puzzle input). Crab submarines have limited fuel, so you need to find a way to make all of their horizontal positions match while requiring them to spend as little fuel as possible.

For example, consider the following horizontal positions:

```
16,1,2,0,4,2,7,1,2,14
```

This means there's a crab with horizontal position 16, a crab with horizontal position 1, and so on.

Each change of 1 step in horizontal position of a single crab costs 1 fuel. You could choose any horizontal position to align them all on, but the one that costs the least fuel is horizontal position 2:

```
- Move from 16 to 2: 14 fuel
- Move from 1 to 2: 1 fuel
- Move from 2 to 2: 0 fuel
- Move from 0 to 2: 2 fuel
- Move from 4 to 2: 2 fuel
- Move from 2 to 2: 0 fuel
- Move from 7 to 2: 5 fuel
- Move from 1 to 2: 1 fuel
- Move from 2 to 2: 0 fuel
- Move from 14 to 2: 12 fuel
```

This costs a total of 37 fuel. This is the cheapest possible outcome; more expensive outcomes include aligning at position 1 (41 fuel), position 3 (39 fuel), or position 10 (71 fuel).

Determine the horizontal position that the crabs can align to using the least fuel possible.

### How much fuel must they spend to align to that position?

To begin, [get your puzzle input](https://adventofcode.com/2021/day/7/input).

## Part One: Solution

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
list =
  input
  |> Kino.Input.read()
  |> String.split(",", trim: true)
  |> Enum.map(&String.to_integer/1)
```

<!-- livebook:{"output":true} -->

```
[1101, 1, 29, 67, 1102, 0, 1, 65, 1008, 65, 35, 66, 1005, 66, 28, 1, 67, 65, 20, 4, 0, 1001, 65, 1,
 65, 1106, 0, 8, 99, 35, 67, 101, 99, 105, 32, 110, 39, 101, 115, 116, 32, 112, 97, 115, 32, 117,
 110, 101, 32, 105, ...]
```

```elixir
# Let's find the location of the median,
# and determine if the list has an even or odd number of entries

len = length(list)
median_index = {div(len, 2), rem(len, 2)}
```

<!-- livebook:{"output":true} -->

```
{500, 0}
```

```elixir
# Sort so we can find the median(s)

sorted = Enum.sort(list)
```

<!-- livebook:{"output":true} -->

```
[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 10, 10,
 10, 10, 11, 11, 11, 12, 12, 13, 14, 15, 15, 16, 16, 16, 16, 16, 16, 17, ...]
```

```elixir
medians =
  case median_index do
    # If even number of entries, we need to try both median values
    {x, 0} -> Enum.slice(sorted, x - 1, 2)
    # If odd number of entries, we only have 1 median value
    {x, 1} -> Enum.slice(sorted, x, 1)
  end
```

<!-- livebook:{"output":true} -->

```
[358, 358]
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
medians
# Don't do it twice if we have 2 median values that are the same
|> Enum.uniq()
# For each median, calculate the total distance traveled
|> Enum.map(fn med ->
  Enum.reduce(list, 0, &(&2 + abs(&1 - med)))
end)
# Take the smallest total distance traveled as the winner
|> Enum.min()
```

<!-- livebook:{"output":true} -->

```
344138
```

### How much fuel must they spend to align to that position?

#### Your puzzle answer was `344138`.

The first half of this puzzle is complete! It provides one gold star: *
