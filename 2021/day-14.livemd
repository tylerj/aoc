<!-- livebook:{"persist_outputs":true} -->

# Advent of Code - Day 14: Extended Polymerization

```elixir
Mix.install([:kino])
```

## Day 14: Extended Polymerization

* [Advent of Code](https://adventofcode.com/2021/day/14)
* [tylerj GitHub](https://github.com/tylerj/aoc/blob/main/2021/day-14.livemd)
* [José Valim GitHub](https://github.com/josevalim/aoc/blob/main/2021/day-14.livemd)
* [José Valim Twitch Stream](https://www.twitch.tv/videos/1234309834?collection=k_DLnk2tvBa-fQ)

## Part One: Prompt

The incredible pressures at this depth are starting to put a strain on your submarine. The submarine has [polymerization](https://en.wikipedia.org/wiki/Polymerization) equipment that would produce suitable materials to reinforce the submarine, and the nearby volcanically-active caves should even have the necessary input elements in sufficient quantities.

The submarine manual contains instructions for finding the optimal polymer formula; specifically, it offers a **polymer template** and a list of **pair insertion** rules (your puzzle input). You just need to work out what polymer would result after repeating the pair insertion process a few times.

For example:

```
NNCB

CH -> B
HH -> N
CB -> H
NH -> C
HB -> C
HC -> B
HN -> C
NN -> C
BH -> H
NC -> B
NB -> B
BN -> B
BB -> N
BC -> B
CC -> N
CN -> C
```

The first line is the **polymer template** - this is the starting point of the process.

The following section defines the **pair insertion** rules. A rule like `AB -> C` means that when elements A and B are immediately adjacent, element C should be inserted between them. These insertions all happen simultaneously.

So, starting with the polymer template NNCB, the first step simultaneously considers all three pairs:

* The first pair (NN) matches the rule `NN -> C`, so element **C** is inserted between the first N and the second N.
* The second pair (NC) matches the rule `NC -> B`, so element **B** is inserted between the N and the C.
* The third pair (CB) matches the rule `CB -> H`, so element **H** is inserted between the C and the B.

Note that these pairs overlap: the second element of one pair is the first element of the next pair. Also, because all pairs are considered simultaneously, inserted elements are not considered to be part of a pair until the next step.

After the first step of this process, the polymer becomes `NCNBCHB`.

Here are the results of a few steps using the above rules:

```
Template:     NNCB
After step 1: NCNBCHB
After step 2: NBCCNBBBCBHCB
After step 3: NBBBCNCCNBBNBNBBCHBHHBCHB
After step 4: NBBNBNBBCCNBCNCCNBBNBBNBBBNBBNBBCBHCBHHNHCBBCBHCB
```

This polymer grows quickly. After step 5, it has length 97; After step 10, it has length 3073. After step 10, B occurs 1749 times, C occurs 298 times, H occurs 161 times, and N occurs 865 times; taking the quantity of the most common element (B, 1749) and subtracting the quantity of the least common element (H, 161) produces 1749 - 161 = `1588`.

Apply 10 steps of pair insertion to the polymer template and find the most and least common elements in the result.

### What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?

To begin, [get your puzzle input](https://adventofcode.com/2021/day/14/input).

## Part One: Solution

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

```elixir
[polymer | rules] = input |> Kino.Input.read() |> String.split("\n", trim: true)
```

<!-- livebook:{"output":true} -->

```
["OOBFPNOPBHKCCVHOBCSO", "NS -> H", "NN -> P", "FF -> O", "HF -> C", "KN -> V", "PO -> B",
 "PS -> B", "FB -> N", "ON -> F", "OK -> F", "OO -> K", "KS -> F", "FN -> F", "KC -> H", "NC -> N",
 "NB -> C", "KH -> S", "SV -> B", "BC -> S", "KB -> B", "SC -> S", "KP -> H", "FS -> K", "NK -> K",
 "OC -> H", "NH -> C", "PH -> F", "OS -> V", "BB -> C", "CC -> F", "CF -> H", "CP -> V", "VB -> N",
 "VC -> F", "PK -> V", "NV -> N", "FO -> S", "CK -> O", "BH -> K", "PN -> B", "PP -> S", "NF -> B",
 "SF -> K", "VF -> H", "HS -> F", "NP -> F", "SH -> V", "SK -> K", "PC -> V", ...]
```

```elixir
rule_map =
  rules
  |> Enum.map(&String.split(&1, " -> "))
  |> Enum.into(
    %{},
    fn [k, v] ->
      {
        String.split(k, "", trim: true),
        v
      }
    end
  )
```

<!-- livebook:{"output":true} -->

```
%{
  ["H", "C"] => "B",
  ["F", "B"] => "N",
  ["O", "S"] => "V",
  ["N", "N"] => "P",
  ["P", "N"] => "B",
  ["B", "H"] => "K",
  ["H", "K"] => "F",
  ["C", "C"] => "F",
  ["N", "C"] => "N",
  ["F", "N"] => "F",
  ["O", "K"] => "F",
  ["C", "B"] => "C",
  ["V", "O"] => "B",
  ["P", "P"] => "S",
  ["B", "K"] => "O",
  ["F", "P"] => "S",
  ["K", "P"] => "H",
  ["F", "S"] => "K",
  ["S", "P"] => "N",
  ["F", "F"] => "O",
  ["C", "S"] => "N",
  ["S", "K"] => "K",
  ["N", "O"] => "H",
  ["V", "N"] => "K",
  ["C", "V"] => "F",
  ["N", "F"] => "B",
  ["S", "B"] => "K",
  ["N", "H"] => "C",
  ["O", "H"] => "F",
  ["K", "S"] => "F",
  ["V", "K"] => "K",
  ["N", "K"] => "K",
  ["B", "N"] => "S",
  ["H", "N"] => "P",
  ["S", "V"] => "B",
  ["B", "B"] => "C",
  ["P", "O"] => "B",
  ["F", "C"] => "N",
  ["P", "F"] => "K",
  ["H", "S"] => "F",
  ["K", "V"] => "S",
  ["C", "H"] => "B",
  ["F", "K"] => "V",
  ["V", "S"] => "N",
  ["O", "B"] => "S",
  ["O", "F"] => "C",
  ["K", "B"] => "B",
  ["K", "H"] => "S",
  ["C", ...] => "V",
  [...] => "F",
  ...
}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
prepare_polymer = fn polymer ->
  polymer
  |> String.split("", trim: true)
  |> Enum.chunk_every(2, 1, [0])
end

prepare_polymer.(polymer)
```

<!-- livebook:{"output":true} -->

```
[
  ["O", "O"],
  ["O", "B"],
  ["B", "F"],
  ["F", "P"],
  ["P", "N"],
  ["N", "O"],
  ["O", "P"],
  ["P", "B"],
  ["B", "H"],
  ["H", "K"],
  ["K", "C"],
  ["C", "C"],
  ["C", "V"],
  ["V", "H"],
  ["H", "O"],
  ["O", "B"],
  ["B", "C"],
  ["C", "S"],
  ["S", "O"],
  ["O", 0]
]
```

```elixir
process_step = fn polymer, rule_map ->
  polymer
  |> prepare_polymer.()
  |> Enum.map(fn key ->
    [key, Map.get(rule_map, key)]
  end)
  |> Enum.map(fn
    [[a | _], nil] -> a
    [[a | _], b] -> a <> b
  end)
  |> Enum.join()
end

result =
  1..10
  |> Enum.reduce(polymer, fn _, acc ->
    process_step.(acc, rule_map)
  end)
```

<!-- livebook:{"output":true} -->

```

```

```elixir
letter_count = fn word ->
  word
  |> String.split("", trim: true)
  |> Enum.reduce(%{}, fn letter, acc ->
    Map.update(acc, letter, 1, &(&1 + 1))
  end)
end

letter_count.(result)
```

<!-- livebook:{"output":true} -->

```
%{
  "B" => 1900,
  "C" => 2285,
  "F" => 3115,
  "H" => 1966,
  "K" => 3077,
  "N" => 1215,
  "O" => 921,
  "P" => 1154,
  "S" => 2339,
  "V" => 1485
}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{{_, min}, {_, max}} = Enum.min_max_by(letter_count.(result), fn {_, v} -> v end)

max - min
```

<!-- livebook:{"output":true} -->

```
2194
```

### What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?

#### Your puzzle answer was `2194`.

The first half of this puzzle is complete! It provides one gold star: *

## Part Two: Prompt

The resulting polymer isn't nearly strong enough to reinforce the submarine. You'll need to run more steps of the pair insertion process; a total of **40 steps** should do it.

In the above example, the most common element is B (occurring 2192039569602 times) and the least common element is H (occurring 3849876073 times); subtracting these produces `2188189693529`.

Apply **40** steps of pair insertion to the polymer template and find the most and least common elements in the result.

### What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?

## Part Two: Solution

```elixir
polymer
```

<!-- livebook:{"output":true} -->

```
"OOBFPNOPBHKCCVHOBCSO"
```

```elixir
rule_map
```

<!-- livebook:{"output":true} -->

```
%{
  ["H", "C"] => "B",
  ["F", "B"] => "N",
  ["O", "S"] => "V",
  ["N", "N"] => "P",
  ["P", "N"] => "B",
  ["B", "H"] => "K",
  ["H", "K"] => "F",
  ["C", "C"] => "F",
  ["N", "C"] => "N",
  ["F", "N"] => "F",
  ["O", "K"] => "F",
  ["C", "B"] => "C",
  ["V", "O"] => "B",
  ["P", "P"] => "S",
  ["B", "K"] => "O",
  ["F", "P"] => "S",
  ["K", "P"] => "H",
  ["F", "S"] => "K",
  ["S", "P"] => "N",
  ["F", "F"] => "O",
  ["C", "S"] => "N",
  ["S", "K"] => "K",
  ["N", "O"] => "H",
  ["V", "N"] => "K",
  ["C", "V"] => "F",
  ["N", "F"] => "B",
  ["S", "B"] => "K",
  ["N", "H"] => "C",
  ["O", "H"] => "F",
  ["K", "S"] => "F",
  ["V", "K"] => "K",
  ["N", "K"] => "K",
  ["B", "N"] => "S",
  ["H", "N"] => "P",
  ["S", "V"] => "B",
  ["B", "B"] => "C",
  ["P", "O"] => "B",
  ["F", "C"] => "N",
  ["P", "F"] => "K",
  ["H", "S"] => "F",
  ["K", "V"] => "S",
  ["C", "H"] => "B",
  ["F", "K"] => "V",
  ["V", "S"] => "N",
  ["O", "B"] => "S",
  ["O", "F"] => "C",
  ["K", "B"] => "B",
  ["K", "H"] => "S",
  ["C", ...] => "V",
  [...] => "F",
  ...
}
```

```elixir
starting_count = prepare_polymer.(polymer) |> Enum.frequencies()
```

<!-- livebook:{"output":true} -->

```
%{
  ["B", "C"] => 1,
  ["B", "F"] => 1,
  ["B", "H"] => 1,
  ["C", "C"] => 1,
  ["C", "S"] => 1,
  ["C", "V"] => 1,
  ["F", "P"] => 1,
  ["H", "K"] => 1,
  ["H", "O"] => 1,
  ["K", "C"] => 1,
  ["N", "O"] => 1,
  ["O", 0] => 1,
  ["O", "B"] => 2,
  ["O", "O"] => 1,
  ["O", "P"] => 1,
  ["P", "B"] => 1,
  ["P", "N"] => 1,
  ["S", "O"] => 1,
  ["V", "H"] => 1
}
```

```elixir
update_count_single_step = fn count_map ->
  count_map
  |> Enum.reduce(%{}, fn {[a, b] = key, count}, acc ->
    new_letter = Map.get(rule_map, key)

    acc
    |> Map.update([a, new_letter], count, &(&1 + count))
    |> Map.update([new_letter, b], count, &(&1 + count))
  end)
end

letter_counts =
  1..40
  |> Enum.reduce(starting_count, fn _x, count -> update_count_single_step.(count) end)
  |> Enum.reduce(%{}, fn
    {[nil, _], _}, acc -> acc
    {[letter, _], count}, acc -> Map.update(acc, letter, count, &(&1 + count))
  end)
```

<!-- livebook:{"output":true} -->

```
%{
  "B" => 2063124320767,
  "C" => 2293130898400,
  "F" => 3198325744551,
  "H" => 2216958989059,
  "K" => 3403627694467,
  "N" => 1197538113113,
  "O" => 1043328798690,
  "P" => 1314805424261,
  "S" => 2473826999765,
  "V" => 1686053944672
}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{{_, min}, {_, max}} = Enum.min_max_by(letter_counts, fn {_, v} -> v end)

max - min
```

<!-- livebook:{"output":true} -->

```
2360298895777
```

Apply 40 steps of pair insertion to the polymer template and find the most and least common elements in the result.

### What do you get if you take the quantity of the most common element and subtract the quantity of the least common element?

#### Your puzzle answer was `2360298895777`.

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2021) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2021/day/14/input).
