<!-- livebook:{"persist_outputs":true} -->

# Day 5 - Advent of Code 2020

```elixir
# Mix.install([:kino, :benchee])
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2020/day/5)
* [AoC Puzzle Input](https://adventofcode.com/2020/day/5/input)
* [tylerj GitHub - Code](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2020/day_05.ex)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2020/day-05.livemd)

## Prompt

### --- Day 5: Binary Boarding ---

You board your plane only to discover a new problem: you dropped your boarding pass! You aren't sure which seat is yours, and all of the flight attendants are busy with the flood of people that suddenly made it through passport control.

You write a quick program to use your phone's camera to scan all of the nearby boarding passes (your puzzle input); perhaps you can find your seat through process of elimination.

Instead of [zones or groups](https://www.youtube.com/watch?v=oAHbLRjF0vo), this airline uses **binary space partitioning** to seat people. A seat might be specified like `FBFBBFFRLR`, where `F` means "front", `B` means "back", `L` means "left", and `R` means "right".

The first 7 characters will either be `F` or `B`; these specify exactly one of the **128 rows** on the plane (numbered 0 through 127). Each letter tells you which half of a region the given seat is in. Start with the whole list of rows; the first letter indicates whether the seat is in the **front** (`0` through `63`) or the **back** (`64` through `127`). The next letter indicates which half of that region the seat is in, and so on until you're left with exactly one row.

For example, consider just the first seven characters of `FBFBBFFRLR`:

Start by considering the whole range, rows `0` through `127`.

* `F` means to take the **lower half**, keeping rows 0 through 63.
* `B` means to take the **upper half**, keeping rows 32 through 63.
* `F` means to take the **lower half**, keeping rows 32 through 47.
* `B` means to take the **upper half**, keeping rows 40 through 47.
* `B` keeps rows `44` through `47`.
* `F` keeps rows `44` through `45`.
* The final F keeps the lower of the two, row 44.

The last three characters will be either L or R; these specify exactly one of the 8 columns of seats on the plane (numbered 0 through 7). The same process as above proceeds again, this time with only three steps. L means to keep the lower half, while R means to keep the upper half.

For example, consider just the last 3 characters of `FBFBBFFRLR`:

* Start by considering the whole range, columns `0` through `7`.
* `R` means to take the **upper half**, keeping columns `4` through `7`.
* `L` means to take the **lower half**, keeping columns `4` through `5`.
* The final `R` keeps the upper of the two, **column `5`**.

So, decoding `FBFBBFFRLR` reveals that it is the seat at **row `44`, column `5`**.

Every seat also has a unique **seat ID**: multiply the row by 8, then add the column. In this example, the seat has ID `44 * 8 + 5 = 357`.

Here are some other boarding passes:

* `BFFFBBFRRR`: row `70`, column `7`, seat ID `567`.
* `FFFBBBFRRR`: row `14`, column `7`, seat ID `119`.
* `BBFFBBFRLL`: row `102`, column `4`, seat ID `820`.

As a sanity check, look through your list of boarding passes. **What is the highest seat ID on a boarding pass?**

To begin, [get your puzzle input](https://adventofcode.com/2020/day/5/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

**Ding!** The "fasten seat belt" signs have turned on. Time to find your seat.

It's a completely full flight, so your seat should be the only missing boarding pass in your list. However, there's a catch: some of the seats at the very front and back of the plane don't exist on this aircraft, so they'll be missing from your list as well.

Your seat wasn't at the very front or back, though; the seats with IDs +1 and -1 from yours will be in your list.

**What is the ID of your seat?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2020/day/5/input).

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
input = AdventOfCode.Input.get!("5", "2020")
```

<!-- livebook:{"output":true} -->

```
"BFFFBBFRLR\nFBFFFBBLRL\nBFFFFFBRRR\nFBBBFFFLRR\nFFBFBFBRLL\nFBBFFBBLRR\nFBBFFFFRLL\nBFFFBBFRLL\nBBFBFBFRLL\nBFFFFFBRLL\nFFBFFFBRRR\nBBFFBFFRLR\nBBFFBBFLLL\nFBFBFBFLLL\nBBFFFFFLLR\nFFBBBFFRLL\nFFBFFBFRRR\nBFFFBBFLRL\nBFBBBBFLRR\nBFBFFBFLLL\nFFBFFBBLRL\nFFBFBFFRLR\nFFBFBBBLLR\nFFFBBFBLLR\nFFFBBBFLRL\nFBFBBBFLLL\nFBBFFFBLLR\nBFFFBBBRLL\nFFBBFBBRRL\nFBFFBBBLLR\nFBFBBFFRRL\nFBBBBFFLLL\nFFBFBFFLLR\nBFFFFBFLLR\nFBBBFBFLRR\nFBFFFFFRRR\nFFBFBBFRRL\nBFFFBBBLLR\nFBBFFBFRLL\nBFFFFBBRLL\nFBBBFFFRRL\nBBFBFFFLLR\nFBBFBBFRLR\nFFFBFFBRRR\nBFBBFBBLRL\nFBBBFFBLRR\nBBFFBBFLRR\nFFBBFBBLLL\nBFFBBBBRRL\nFBBFBFBRLL\nBFFFFFFRRL\nBBFBFBFLLL\nFBFFBFFLLR\nFBFBFBFRLR\nBFBFBBBRLR\nBBFFBBFLLR\nBFFBFBFRRR\nBFBBFBFLLL\nFBFBBFBRLR\nFBBFBFBLRL\nFBFFBFFLRR\nBFFFFFFRRR\nBFFFFBFRLL\nFBFBFFFLLR\nBFFFFBFLRL\nBBFFFFFRLL\nFBFBFFFLRR\nBFFBFBBLRL\nBFBFBBFLLR\nBFBFBBBLRL\nBFFBFFFRRL\nBFFFFFFLLL\nFFBBBBBLLR\nFBBBFFFLLL\nBFFFBBFRRL\nFFFBFBBRLL\nFFFBFFBRRL\nBFBFBFBRRR\nBBFFFBFLLR\nBFFFBFFLLL\nFBFBBFBLRR\nFFBBBBFLRR\nBFFBBBFLRR\nBBFFBBBLLR\nFFFBFBBRRL\nBBFFFBBLRR\nFFBFFFBRRL\nFFBFFFBRLR\nBFBFBFFRLL\nFBFFFBFLRL\nBBFFFFFRLR\nBFBBFFBRLR\nFBFBFBBRRR\nBFBFFFFLLR\nFFBFBFBLRR\nFFFBBBBRRL\nFBFFBBFRRR\nBFFBBBBLRR\nBFFBFFFLLR\nBFBFFBFLLR\nFBBBBBBRLR\nBFBFFFFLRL\nBBFFBFFLLL\nFBBBBBBLLR\nFFBBBBBRRL\nBFBFFFFLLL\nFBFBBBFRLL\nBFFBBBFLRL\nFBBFBBBLLL\nFBFBBFBRRR\nFFBBFFFRLL\nBBFFBBBLRL\nFBBFFFBRLL\nBBFBFFBRLR\nFBBBFFBLLR\nBFBFFFBRRL\nFBFFBBBRLL\nFBFBBBBRLL\nBFFFBFFRLR\nFFBBFBFRLR\nBFBFBFFLRR\nFFFBBFFLRR\nBFBFBBBLLL\nBFBFBFBRLR\nBFFFFBFLRR\nFFBBBFBRRR\nBFFFFBBLLR\nBBFFBFBLRR\nBFBFFFBRRR\nBFFFFBBRLR\nFBBBBBFRRR\nFBBFBBFLLR\nFFBBFBBRLL\nBFBBFFBLRR\nFBBBFFFLLR\nBFFFBFFLRL\nFBBBBFBLLR\nBFBBFBFLRR\nBFBBBFFLLL\nBFFBFBFRLL\nBFBBFBFRRL\nBFFBFFBLRR\nFFBFFFBLLL\nFFFBFBFLRL\nFBBBFBBLRR\nBFFFBBBLRR\nFBFFFFFRLR\nBBFFBBBLRR\nBFBFFBBLRR\nFBFFBBBRRR\nFBFFBFFLLL\nBFBBBBFRLL\nFBBBBBBRRL\nBFFBBBBLRL\nFFBFBBFLRR\nFFBBBFBLLL\nFBBFFFFRLR\nBBFBFBFRRR\nFBFBFFBLRL\nFFBBFBBLRL\nFBFBBFFLLL\nBFFFBFBLRR\nFBFBFFBLLR\nFBBBBBFLRL\nFFBFBFFRLL\nBBFFBBFRRR\nFFFBBFFLLR\nBFBBBFBLRR\nFFBBFFBLRL\nBFFBBBFRRL\nBFBBBBFRRL\nBBFFBFFRRL\nFFBFFBBRRR\nBFFBFBFLRR\nFBFBFFBRRR\nFBBFBBFLRL\nFBFFFFBLRL\nFBFFFBBLLL\nFFBFFBFRLR\nFBFFFBBRRL\nBFBBBFBLLL\nBFBFBFFLRL\nBFBFFBFRRR\nBBFFBBBRLL\nBBFFFBFLRL\nBBFFBFFRLL\nFBBFFBFLLL\nFBBBBFFLLR\nFFBFFFFLLR\nFFBBBBFLLR\nBFBBBBBRRR\nFFBBFBFRRR\nFFBFFBFLRL\nFBFBBFFRRR\nBFBBBFFRRR\nFBBFBBFRLL\nFBBFBBBRLR\nBFFFFFBRLR\nBFFBFBBRLL\nFBFFFBBLRR\nFFBFFFFRLL\nFBBBBFBRRL\nFBBBBFBRLR\nBFBBBBFLLL\nFBBBBBFRLL\nFBFBFBFLRL\nFFBFBBFLLL\nFBBBBFFRRL\nBFFBFBFLLL\nFFFBBBFLLL\nFBFBBBBLLL\nBFBBBBFRLR\nBBFBFFFRRR\nFBBBBBBLRL\nBFFFBFBLRL\nFFBBFBFLLR\nBFBBBFBLRL\nFBBBBBBRLL\nFFBBFFFRRR\nBFFFFBBRRR\nFBFFBBBLLL\nBBFBFFFLRL\nFFBFFFBLRR\nFFBBBFBLLR\nBFFBBFFRRR\nFBBFBFFLRL\nFFBBBBBLRR\nFBBBFBBLLL\nBBFBFBFRLR\nFBFBFBBLRR\nFBBBFBBRLR\nFBFBFBBLLR\nFFFBBFBRRR\nFBBBFFBRLL\nFFBBBBFLRL\nBBFFBFFRRR\nFBFBFBFLLR\nFBBBFBFRLR\nBFFBBBFRRR\nFFFBFBBLLR\nBBFBFBBLRR\nFBFFBBFRLR\nFFBBBFFLLR\nFFBBFBFLRL\nBFFBFFFLLL\nBFBFFBFRRL\nFBFBBBBRRL\nBFBBBBFLLR\nFBBFFBBRLL\nBFFBBFBRLR\nBFBFFFBLRR\nFFBBFFBLRR\nFBBFFFFRRL\nBFBBFBBLLR\nFBFFFBFRLR\nBFBBBBFLRL\nBFBBBBBRLL\nFFBBBBFRLR\nBBFBFFBLLR\nFBBFFFBLRR\nFBFFFFFLLL\nFBBFFBFRLR\nFBFFBBBRRL\nFFBFBFBRRL\nFFBBBBFLLL\nFFBFBBBRLR\nFBBFBFBRLR\nBBFFFBBLLR\nFBBFFBBLLL\nFFBBFFFLLL\nFBBBBBFLRR\nFFBBFFFLRR\nBFFBFFBLLR\nFBFFBFBRRR\nFFFBFFBRLR\nFBFFFFFLRR\nBFFFBFBRLL\nFBFBBFBRRL\nFFBFBBBLRL\nBFFFBBFLLR\nFBBFFBBRRR\nBFBBFBFRLL\nFBFFFFBRLL\nBBFFFFBLRR\nBFFBFBFLLR\nFFBFBBBRRL\nFBBFFFBRLR\nFFBBBBFRRR\nBFBBFFBLLR\nBFBFFFBLLL\nBFFFBBBRRR\nFBFBBBFRRR\nBFBFFBBRRL\nFBFBBFBLLR\nBFFFBBBRLR\nBFFFFBFLLL\nBFFBFFBRLR\nFBBFBFBRRR\nFFBBFBBRRR\nFBFFFBBLLR\nBFBBFBBRLR\nFFBBBBBRLR\nFBFFBBFRRL\nBFFBBBFLLR\nFBBBFFBLLL\nBFBFBFFRRR\nBFBFBBFRRR\nFBBFFBBLLR\nBFFFFFFLLR\nFBBBBFFRLR\nFBBBBBBLLL\nBFBBBBFRRR\nBFBBBFFRLR\nFFBFFBBRLL\nFFBBFBFLLL\nBFBFFFBLRL\nFFFBBBFLRR\nFBBFBFFRRL\nFFFBFBFLLL\nBFFBBFBLLL\nBBFFFFBLLL\nBFBBBBBRRL\nFBBFBFBLRR\nFBFFBFBRLL\nBBFBFBBLLL\nFFBBBFBLRR\nFBBBFFFRRR\nBFFBBBBLLL\nFBFBFBFRRR\nBFFFFFBLLL\nBFBFBFBLLR\nBBFFFFBRRL\nFBBBFBFLLL\nFFBFFFFLLL\nFBFBFFBLLL\nFBBBBBBRRR\nBFBFFBFLRR\nFFBFBFBLLL\nFFBFFBFRRL\nBFBFBBFRRL\nFFBBFBBLLR\nFBBBBBFLLR\nBFFBFFFRLL\nBBFFFBBLLL\nFBFFFFFLLR\nFFBBBFFRRR\nFBFFFBFRRR\nFFFBBBBLRL\nFBFBFBBRRL\nFBBFBFBLLL\nBFBFFFFLRR\nBBFFBFBLRL\nFFFBFBFRLR\nBFFBBFFLRL\nFFFBBFFRRL\nBFBFBFBRRL\nFFBBBFFLLL\nBBFFFBFLRR\nFFFBBBBLLR\nFFBBBFFRLR\nFFBFBBFLRL\nFFBBBFBLRL\nBFBFFFFRRL\nFBFBBFFLRR\nFBBBBBBLRR\nFBFBBBBRRR\nFFBFBFFLRR\nFBBFBFFRLR\nBFFBBBBRRR\nBFFFBFBLLL\nBFFBBFFLLL\nBFFFFBBLRL\nFFBB" <> ...
```

## Solution

```elixir
defmodule Day05 do
  defdelegate parse(input), to: __MODULE__.Input

  @front_chars ~w(F L)
  @back_chars ~w(B R)
  def part1(input) do
    input
    |> parse()
    |> calc_seat_ids()
    |> Enum.max()
  end

  def part2(input) do
    input
    |> parse()
    |> calc_seat_ids()
    |> Enum.sort()
    |> find_my_seat()
  end

  defp calc_seat_ids(input) do
    input
    |> Enum.map(fn {row, col} ->
      {
        binary_partition(row, 0..127),
        binary_partition(col, 0..7)
      }
    end)
    |> Enum.map(fn {row, col} ->
      row * 8 + col
    end)
  end

  defp binary_partition(chars, range)
  defp binary_partition([front], f.._b) when front in @front_chars, do: f
  defp binary_partition([back], _f..b) when back in @back_chars, do: b

  defp binary_partition([f_or_b | rest], range) do
    new_size = div(Range.size(range), 2)
    new_range = range |> Range.split(new_size) |> front_or_back(f_or_b)

    binary_partition(rest, new_range)
  end

  defp front_or_back({f, _b}, front) when front in @front_chars, do: f
  defp front_or_back({_f, b}, back) when back in @back_chars, do: b

  defp find_my_seat([a | [b | _]]) when a + 2 == b, do: a + 1
  defp find_my_seat([_ | rest]), do: find_my_seat(rest)

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.splitter("\n", trim: true)
      |> parse()
    end

    def parse(input) do
      Stream.map(input, &parse_line/1)
    end

    def parse_line(line) do
      line
      |> String.split("", trim: true)
      |> Enum.split(7)
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day05, <<70, 79, 82, 49, 0, 0, 14, ...>>,
 {:module, Day05.Input, <<70, 79, 82, ...>>, {:parse_line, 1}}}
```

**What is the highest seat ID on a boarding pass?**

Your puzzle answer was `864`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day05.part1(input)
```

<!-- livebook:{"output":true} -->

```
864
```

**What is the ID of your seat?**

Your puzzle answer was `739`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day05.part2(input)
```

<!-- livebook:{"output":true} -->

```
739
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2020) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2020/day/5/input).
