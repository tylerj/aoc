<!-- livebook:{"persist_outputs":true} -->

# Day 9 - Advent of Code 2022

```elixir
Mix.install([:kino, :benchee])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2022/day/9)
* [AoC Puzzle Input](https://adventofcode.com/2022/day/9/input)
* [tylerj GitHub - Code](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2022/day_09.ex)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2022/day-09.livemd)

## Prompt

### --- Day 9: Rope Bridge ---

This rope bridge creaks as you walk along it. You aren't sure how old it is, or whether it can even support your weight.

It seems to support the Elves just fine, though. The bridge spans a gorge which was carved out by the massive river far below you.

You step carefully; as you do, the ropes stretch and twist. You decide to distract yourself by modeling rope physics; maybe you can even figure out where **not** to step.

Consider a rope with a knot at each end; these knots mark the **head** and the **tail** of the rope. If the head moves far enough away from the tail, the tail is pulled toward the head.

Due to nebulous reasoning involving [Planck lengths](https://en.wikipedia.org/wiki/Planck_units#Planck_length), you should be able to model the positions of the knots on a two-dimensional grid. Then, by following a hypothetical **series of motions** (your puzzle input) for the head, you can determine how the tail will move.

Due to the aforementioned Planck lengths, the rope must be quite short; in fact, the head (H) and tail (T) must **always be touching** (diagonally adjacent and even overlapping both count as touching):

```
....
.TH.
....

....
.H..
..T.
....

...
.H. (H covers T)
...
```

If the head is ever two steps directly up, down, left, or right from the tail, the tail must also move one step in that direction so it remains close enough:

```
.....    .....    .....
.TH.. -> .T.H. -> ..TH.
.....    .....    .....

...    ...    ...
.T.    .T.    ...
.H. -> ... -> .T.
...    .H.    .H.
...    ...    ...
```

Otherwise, if the head and tail aren't touching and aren't in the same row or column, the tail always moves one step diagonally to keep up:

```
.....    .....    .....
.....    ..H..    ..H..
..H.. -> ..... -> ..T..
.T...    .T...    .....
.....    .....    .....

.....    .....    .....
.....    .....    .....
..H.. -> ...H. -> ..TH.
.T...    .T...    .....
.....    .....    .....
```

You just need to work out where the tail goes as the head follows a series of motions. Assume the head and the tail both start at the same position, overlapping.

For example:

```
R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2
```

This series of motions moves the head **right** four steps, then **up** four steps, then **left** three steps, then **down** one step, and so on. After each step, you'll need to update the position of the tail if the step means the head is no longer adjacent to the tail. Visually, these motions occur as follows (s marks the starting position as a reference point):

([SEE WEBSITE FOR FULL EXAMPLE](https://adventofcode.com/2022/day/9))

After simulating the rope, you can count up all of the positions the tail visited at least once. In this diagram, s again marks the starting position (which the tail also visited) and # marks other positions the tail visited:

```
..##..
...##.
.####.
....#.
s###..
```

So, there are `13` positions the tail visited at least once.

Simulate your complete hypothetical series of motions. **How many positions does the tail of the rope visit at least once?**

To begin, [get your puzzle input](https://adventofcode.com/2022/day/9/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

A rope snaps! Suddenly, the river is getting a lot closer than you remember. The bridge is still there, but some of the ropes that broke are now whipping toward you as you fall through the air!

The ropes are moving too quickly to grab; you only have a few seconds to choose how to arch your body to avoid being hit. Fortunately, your simulation can be extended to support longer ropes.

Rather than two knots, you now must simulate a rope consisting of **ten** knots. One knot is still the head of the rope and moves according to the series of motions. Each knot further down the rope follows the knot in front of it using the same rules as before.

Using the same series of motions as the above example, but with the knots marked H, 1, 2, ..., 9, the motions now occur as follows:

([SEE WEBSITE FOR FULL EXAMPLE](https://adventofcode.com/2022/day/9))

Now, you need to keep track of the positions the new tail, 9, visits. In this example, the tail never moves, and so it only visits 1 position. However, be careful: more types of motion are possible than before, so you might want to visually compare your simulated rope to the one above.

Here's a larger example:

```
R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20
```

These motions occur as follows (individual steps are not shown):

([SEE WEBSITE FOR FULL EXAMPLE](https://adventofcode.com/2022/day/9))

Simulate your complete series of motions on a larger rope with ten knots. **How many positions does the tail of the rope visit at least once?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2022/day/9/input).

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
"D 1\nL 1\nU 1\nR 2\nL 1\nU 1\nL 1\nR 2\nU 1\nD 2\nL 2\nD 1\nL 1\nR 1\nL 1\nU 1\nD 1\nR 2\nL 2\nU 1\nR 2\nL 1\nR 1\nU 2\nD 1\nR 2\nL 1\nU 2\nD 1\nR 2\nL 1\nD 1\nR 1\nU 1\nR 1\nL 1\nU 1\nL 1\nD 2\nU 1\nR 1\nD 2\nL 1\nU 1\nL 1\nU 2\nR 1\nD 2\nU 1\nR 1\nL 2\nD 1\nL 2\nR 1\nU 2\nL 1\nR 1\nL 2\nU 1\nR 1\nL 1\nU 2\nD 1\nL 1\nU 1\nR 2\nU 1\nD 1\nL 1\nR 2\nL 1\nD 1\nL 2\nR 1\nL 2\nU 2\nD 2\nU 1\nD 2\nR 2\nL 2\nR 2\nD 2\nR 1\nL 1\nU 1\nL 2\nD 2\nL 1\nU 1\nR 2\nD 2\nL 1\nU 2\nL 1\nU 2\nD 1\nR 2\nD 1\nU 2\nD 2\nL 2\nU 1\nL 1\nR 2\nD 2\nL 1\nU 1\nR 1\nL 1\nU 2\nD 1\nL 1\nR 1\nD 1\nL 2\nD 1\nU 1\nD 3\nL 1\nU 1\nD 2\nU 2\nD 2\nL 1\nR 1\nL 3\nR 2\nU 2\nR 1\nU 3\nL 2\nR 3\nU 1\nR 2\nD 2\nU 3\nR 3\nD 2\nL 1\nR 2\nL 3\nR 2\nD 1\nR 1\nD 2\nR 1\nL 1\nU 3\nD 1\nU 2\nD 3\nR 2\nU 2\nL 1\nD 1\nU 1\nD 1\nR 1\nU 2\nR 1\nL 2\nU 1\nD 1\nL 2\nR 2\nD 1\nR 3\nL 2\nR 1\nU 1\nR 2\nU 1\nR 1\nL 3\nR 3\nD 3\nL 1\nR 3\nD 2\nL 2\nR 3\nD 2\nR 2\nL 2\nU 3\nL 3\nU 3\nR 1\nD 2\nR 1\nD 3\nL 3\nD 1\nU 1\nD 3\nR 1\nU 2\nL 3\nU 1\nL 3\nR 1\nU 1\nR 1\nD 1\nR 1\nL 2\nD 1\nR 3\nL 1\nD 1\nU 3\nD 3\nL 1\nU 1\nD 2\nU 3\nR 2\nU 2\nL 1\nD 3\nU 1\nL 1\nR 1\nU 3\nD 4\nR 3\nU 2\nR 2\nU 3\nL 3\nU 4\nL 3\nU 1\nD 2\nL 1\nU 4\nR 3\nL 1\nR 1\nL 4\nR 4\nL 2\nU 3\nD 4\nU 2\nR 1\nD 4\nR 4\nL 1\nR 2\nU 3\nL 2\nD 3\nU 1\nL 3\nU 3\nL 4\nD 3\nR 2\nD 1\nL 4\nD 4\nL 2\nD 1\nL 2\nR 4\nU 4\nL 3\nR 1\nD 1\nR 1\nU 2\nL 4\nU 3\nD 2\nU 3\nD 3\nU 4\nL 4\nU 3\nD 2\nR 2\nU 3\nR 2\nL 4\nD 4\nR 2\nD 1\nL 3\nU 4\nD 4\nR 1\nU 4\nD 4\nU 4\nR 1\nU 4\nR 2\nD 4\nU 1\nR 4\nL 2\nR 3\nU 3\nD 4\nR 1\nD 2\nU 2\nR 1\nU 4\nD 4\nL 4\nU 2\nR 1\nU 1\nD 1\nL 2\nD 2\nU 1\nD 2\nU 3\nD 2\nL 3\nU 3\nD 3\nL 3\nR 3\nL 2\nU 4\nL 4\nU 4\nL 1\nD 1\nR 4\nD 2\nL 1\nR 1\nL 4\nD 4\nU 1\nD 2\nU 5\nR 2\nU 3\nD 2\nL 2\nR 1\nU 1\nR 4\nD 4\nR 2\nL 1\nD 3\nU 3\nL 2\nD 4\nU 4\nD 4\nR 1\nU 1\nD 3\nR 1\nD 5\nU 4\nR 4\nD 5\nU 5\nL 5\nD 3\nR 2\nD 4\nL 2\nR 5\nD 5\nR 4\nD 1\nL 1\nR 5\nD 1\nU 1\nL 4\nR 5\nD 2\nL 1\nU 1\nR 5\nD 4\nL 1\nR 1\nD 5\nL 2\nD 4\nR 3\nL 3\nU 2\nD 1\nR 5\nL 3\nU 1\nD 3\nU 3\nD 1\nL 2\nR 3\nU 3\nD 5\nL 1\nD 5\nR 2\nU 2\nD 5\nL 4\nR 4\nL 2\nR 4\nD 4\nU 3\nD 1\nU 5\nL 5\nU 4\nD 4\nU 4\nR 2\nD 2\nL 2\nU 5\nL 5\nR 1\nL 4\nD 1\nR 5\nD 5\nL 3\nU 4\nR 2\nU 3\nL 1\nU 1\nD 2\nL 3\nD 2\nL 1\nU 4\nL 1\nD 6\nL 5\nU 4\nR 2\nL 6\nR 3\nL 4\nU 1\nD 5\nR 4\nL 5\nR 5\nU 5\nR 6\nD 2\nU 2\nD 3\nU 5\nR 6\nU 5\nL 3\nR 1\nL 6\nD 3\nL 6\nD 6\nR 6\nD 3\nR 6\nD 1\nU 5\nR 1\nU 2\nR 6\nU 2\nL 1\nR 4\nD 6\nL 4\nR 5\nD 1\nR 5\nU 1\nL 3\nU 3\nL 2\nD 2\nR 5\nL 1\nR 5\nL 4\nR 6\nU 3\nR 6\nU 5\nR 4\nD 2\nL 4\nU 2\nR 6\nL 3\nU 2\nL 6\nU 4\nR 6\nL 6\nD 5\nU 5\nL 1\nR 4\nL 1\nD 4\nR 4\nL 6\nD 3\nU 2\nD 6\nR 4\nD 6\nU 3\nL 6\nU 6\nR 3\nL 2\nR 1\nD 5\nR 2\nL 1\nU 1\nD 1\nL 3\nD 5\nR 5\nL 3\nU 2\nR 1\nU 4\nR 2\nD 6\nR 2\nU 4\nR 1\nU 3\nL 5\nD 5\nL 1\nR 4\nL 5\nD 5\nR 2\nU 7\nL 4\nU 6\nR 5\nU 7\nD 1\nR 4\nD 3\nR 5\nU 5\nD 6\nL 4\nU 2\nD 2\nR 6\nL 1\nR 4\nD 1\nU 2\nL 2\nR 2\nU 2\nR 6\nD 2\nU 5\nR 3\nU 3\nD 6\nL 3\nR 4\nU 4\nR 2\nD 3\nU 1\nL 3\nU 5\nD 7\nU 4\nR 5\nD 4\nR 6\nU 1\nD 5\nU 3\nR 6\nU 4\nR 6\nL 5\nR 6\nL 4\nR 2\nU 7\nL 5\nR 5\nD 4\nL 7\nD 7\nU 1\nL 2\nD 4\nR 3\nU 4\nR 3\nU 6\nD 4\nL 2\nR 2\nU 4\nD 6\nU 4\nD 1\nR 5\nL 7\nD 4\nU 1\nD 3\nR 7\nD 7\nU 4\nR 4\nD 6\nU 4\nR 7\nD 3\nL 4\nU 7\nR 5\nD 6\nU 1\nL 4\nU 6\nD 5\nR 3\nU 2\nD 7\nU 7\nD 7\nU 4\nD 7\nU 4\nD 2\nU 7\nR 3\nU 7\nR 7\nD 3\nL 3\nR 5\nD 3\nR 5\nU 8\nL 6\nR 7\nL 4\nR 8\nU 6\nL 2\nU 8\nR 3\nU 5\nR 2\nD 5\nR 7\nD 4\nR 3\nL 5\nR 4\nD 8\nU 4\nL 4\nU 2\nL 4\nR 8\nD 2\nU 5\nD 3\nR 1\nU 5\nL 2\nR 2\nU 6\nL 3\nR 8\nL 3\nU 3\nR 5\nU 1\nL 3\nR 6\nL 4\nR 5\nD 5\nR 7\nL 3\nR 1\nD 8\nR 1\nU 3\nL 1\nU 6\nD 4\nR 8\nU 1\nD 6\nL 5\nR 5\nU 4\nD 8\nR 8\nL 1\nR 3\nU 5\nL 4\nU 2\nR 6\nU 5\nR 6\nU 7\nL 1\nR 1\nL 8\nR 7\nU 8\nR 6\nU 1\nL 1\nR 3\nD 4\nR 6\nL 7\nD 4\nU 7\nR 7\nU 6\nL 6\nD 4\nR 5\nU 1\nD 8\nR 2\nD 1\nR 6\nL 3\nD 7\nR 5\nL 4\nD 4\nU 3\nD 3\nR 3\nU 3\nL 8\nD 1\nL 7\nD 7\nR 2\nL 1\nU 2\nD 8\nR 1\nU 7\nL 8\nU 3\nR 5\nU 7\nD 7\nU 3\nL 5\nU 1\nD 3\nU 6\nR 9\nL 7\nU 8\nL 6\nR 4\nL 1\nR 6\nU 4\nL 4\nR 4\nD 6\nL 9\nD 2\nL 2\nR 5\nL 8\nU 2\nR 5\nU 4\nL 2\nD 6\nU 8\nD 8\nU 4\nR 1\nD 9\nU 5\nD 8\nR 1\nU 7\nD 4\nL 4\nR 3\nL 2\nD 4\nL 9\nD 1\nU 2\nL 2\nR 1\nD 5\nU 8\nR 8\nU 9\nL 8\nD 4\nU 6\nL 1\nD 8\nL 6\nU 3\nR 2\nL 7\nD 6\nU 7\nD 7\nL 8\nR 2\nU 2\nL 6\nD 6\nU 4\nR 3\nL 5\nD 4\nR 3\nD 6\nL 5\nR 7\nU 3\nL 6\nU 6\nR 8\nD 5\nU 7\nR 4\nU 2\nD 6\nR 9\nU 3\nD 3\nU 1\nL 4\nR 8\nD 8\nL 2\nD 3\nL 9\nU 6\nR 4\nL 3\nR 8\nL 3\nD 9\nL 2\nD 3\nU 1\nD 3\nU 2\nL 1\nU 9\nL 8\nD 1\nL 9\nU 1\nL 2\nD 9\nR 10\nD 8\nR 9\nD 3\nU 9\nD 5\nR 9\nU 5\nD 3\nU 4\nD 10\nL 3\nR 1\nD 4\nU 1\nL 4\nU 4\nD 7\nL 8\nD 8\nL 3\nR 3\nL 9\nR 3\nD 4\nR 9\nL 1\nD 4\nU 5\nL 7\nD 9\nR 4\nU 3\nL 4\nD 2\nL 9\nU 3\nD 10\nL 4\nD 7\nR 7\nL 6\nU 2\nD 9\nU 5\nR 7\nL 7\nU 4\nL 7\nR 1\nL 10\nR 9\nU 1\nL 9\nU 3\nL 6\nU 9\nR 8\nL 2\nR 1\nU 9\nR 7\nD 1\nL 1\nR 5\nU 7\nL 7\nD 6\nR 2\nU 2\nD 1\nL 10\nU 9\nD 1\nL 5\nR 9\nD 2\nL 1\nR 6\nD 9\nU 3\nL 9\nR 7\nL 6\nU 2\nR 6\nL 2\nD 6\nU 8\nD 7\nL 1\nR 2\nU 7\nR 5\nU 2\nL 10\nD 2\nL 4\nR 8\nL 5\nD 4\nL 4\nR 3\nU 3\nD 10\nR 8\nU 8\nD 10\nU 4\nR 2\nL 11\nU 10\nR 2\nU 2\nL 11\nR 11\nD 3\nU 11\nL 11\nR 1\nL 9\nD 10\nR 8\nL 2\nD 1\nL 1\nD" <> ...
```

```elixir
defmodule Day09.Input do
  def parse(input) when is_binary(input) do
    input
    |> String.split("\n")
    |> parse()
  end

  def parse(input) when is_list(input) do
    Stream.map(input, &parse_line/1)
  end

  def parse_line(line) do
    line
    |> String.split(" ")
    |> then(fn [dir, num] -> [dir, String.to_integer(num)] end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day09.Input, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:parse_line, 1}}
```

## Solution

```elixir
defmodule Day09.Part1 do
  @init_state {{0, 0}, {0, 0}, MapSet.new([{0, 0}])}

  def part1(input) do
    input
    |> Day09.Input.parse()
    |> Enum.reduce(@init_state, &make_moves/2)
    |> elem(2)
    |> MapSet.size()
  end

  defp make_moves([move, num], state) do
    for _ <- 1..num, reduce: state do
      acc -> make_move(move, acc)
    end
  end

  defp make_move(dir, {head_xy, tail_xy, set}) do
    new_head_xy = move_head(head_xy, dir)
    new_tail_xy = move_tail(tail_xy, new_head_xy, head_xy)

    {new_head_xy, new_tail_xy, MapSet.put(set, new_tail_xy)}
  end

  def move_head({x, y}, "U"), do: {x, y + 1}
  def move_head({x, y}, "D"), do: {x, y - 1}
  def move_head({x, y}, "L"), do: {x - 1, y}
  def move_head({x, y}, "R"), do: {x + 1, y}

  defp move_tail({a, _}, {b, _}, old_head) when abs(a - b) > 1, do: old_head
  defp move_tail({_, a}, {_, b}, old_head) when abs(a - b) > 1, do: old_head
  defp move_tail(tail_xy, _, _), do: tail_xy
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day09.Part1, <<70, 79, 82, 49, 0, 0, 13, ...>>, {:move_tail, 3}}
```

Simulate your complete hypothetical series of motions. **How many positions does the tail of the rope visit at least once?**

Your puzzle answer was `5683`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day09.Part1.part1(input)
```

<!-- livebook:{"output":true} -->

```
5683
```

```elixir
defmodule Day09.Part2 do
  @init_list List.duplicate({0, 0}, 10)
  @init_state {@init_list, MapSet.new([{0, 0}])}

  def part2(input) do
    input
    |> Day09.Input.parse()
    |> Enum.reduce(@init_state, &make_moves/2)
    |> elem(1)
    |> MapSet.size()
  end

  defp make_moves([move, num], state) do
    for _ <- 1..num, reduce: state do
      acc -> make_move(move, acc)
    end
  end

  defp make_move(dir, {[head | tail], set}) do
    new_head = Day09.Part1.move_head(head, dir)
    new_tails = move_tails(tail, new_head)

    {[new_head | new_tails], add(set, new_tails)}
  end

  defp add(set, tails), do: MapSet.put(set, List.last(tails))

  defp move_tails([xy | tail], prior) do
    new_xy = move_tail(xy, prior)

    [new_xy | move_tails(tail, new_xy)]
  end

  defp move_tails([], _), do: []

  defp move_tail({tx, ty}, {hx, hy}) when abs(hx - tx) > 1 or abs(hy - ty) > 1 do
    x =
      cond do
        hx > tx -> 1
        hx < tx -> -1
        hx == tx -> 0
      end

    y =
      cond do
        hy > ty -> 1
        hy < ty -> -1
        hy == ty -> 0
      end

    {tx + x, ty + y}
  end

  defp move_tail(tail_xy, _), do: tail_xy
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day09.Part2, <<70, 79, 82, 49, 0, 0, 14, ...>>, {:move_tail, 2}}
```

Simulate your complete series of motions on a larger rope with ten knots. **How many positions does the tail of the rope visit at least once?**

Your puzzle answer was `2372`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day09.Part2.part2(input)
```

<!-- livebook:{"output":true} -->

```
2372
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2022) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2022/day/9/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day09Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input1: "R 4\nU 4\nL 3\nD 1\nR 4\nD 1\nL 5\nR 2",
      input2: "R 5\nU 8\nL 8\nD 3\nR 17\nD 10\nL 25\nU 20"
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input1: input} do
      assert Day09.Part1.part1(input) == 13
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input1: input1, input2: input2} do
      assert Day09.Part2.part2(input1) == 1
      assert Day09.Part2.part2(input2) == 36
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 442239
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```

## Benchmarking

```elixir
# https://github.com/bencheeorg/benchee

Benchee.run(%{
  "Part 1" => fn -> Day09.Part1.part1(input) end,
  "Part 2" => fn -> Day09.Part2.part2(input) end
})

nil
```

<!-- livebook:{"output":true} -->

```
Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 16 GB
Elixir 1.14.1
Erlang 25.1.2

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 0 ns
reduction time: 0 ns
parallel: 1
inputs: none specified
Estimated total run time: 14 s

Benchmarking Part 1 ...
Benchmarking Part 2 ...

Name             ips        average  deviation         median         99th %
Part 1        341.81        2.93 ms     ±7.38%        2.90 ms        3.34 ms
Part 2        293.91        3.40 ms     ±5.74%        3.39 ms        3.59 ms

Comparison: 
Part 1        341.81
Part 2        293.91 - 1.16x slower +0.48 ms
```

<!-- livebook:{"output":true} -->

```
nil
```
