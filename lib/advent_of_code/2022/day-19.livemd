<!-- livebook:{"persist_outputs":true} -->

# Day 19 - Advent of Code 2022

```elixir
Mix.install([:kino, :benchee])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2022/day/19)
* [AoC Puzzle Input](https://adventofcode.com/2022/day/19/input)
* [tylerj GitHub - Code](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2022/day_19.ex)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2022/day-19.livemd)

## Prompt

### --- Day 19: Not Enough Minerals ---

Your scans show that the lava did indeed form obsidian!

The wind has changed direction enough to stop sending lava droplets toward you, so you and the elephants exit the cave. As you do, you notice a collection of [geodes](https://en.wikipedia.org/wiki/Geode) around the pond. Perhaps you could use the obsidian to create some **geode-cracking robots** and break them open?

To collect the obsidian from the bottom of the pond, you'll need waterproof obsidian-collecting robots. Fortunately, there is an abundant amount of clay nearby that you can use to make them waterproof.

In order to harvest the clay, you'll need special-purpose **clay-collecting robots**. To make any type of robot, you'll need **ore**, which is also plentiful but in the opposite direction from the clay.

Collecting ore requires **ore-collecting robots** with big drills. Fortunately, **you have exactly one ore-collecting robot** in your pack that you can use to kickstart the whole operation.

Each robot can collect 1 of its resource type per minute. It also takes one minute for the robot factory (also conveniently from your pack) to construct any type of robot, although it consumes the necessary resources available when construction begins.

The robot factory has many **blueprints** (your puzzle input) you can choose from, but once you've configured it with a blueprint, you can't change it. You'll need to work out which blueprint is best.

For example:

```
Blueprint 1:
  Each ore robot costs 4 ore.
  Each clay robot costs 2 ore.
  Each obsidian robot costs 3 ore and 14 clay.
  Each geode robot costs 2 ore and 7 obsidian.

Blueprint 2:
  Each ore robot costs 2 ore.
  Each clay robot costs 3 ore.
  Each obsidian robot costs 3 ore and 8 clay.
  Each geode robot costs 3 ore and 12 obsidian.
```

(Blueprints have been line-wrapped here for legibility. The robot factory's actual assortment of blueprints are provided one blueprint per line.)

The elephants are starting to look hungry, so you shouldn't take too long; you need to figure out which blueprint would maximize the number of opened geodes after `24 minutes` by figuring out which robots to build and when to build them.

Using blueprint 1 in the example above, the largest number of geodes you could open in `24` minutes is `9`. One way to achieve that is:

```
== Minute 1 ==
1 ore-collecting robot collects 1 ore; you now have 1 ore.

== Minute 2 ==
1 ore-collecting robot collects 1 ore; you now have 2 ore.

== Minute 3 ==
Spend 2 ore to start building a clay-collecting robot.
1 ore-collecting robot collects 1 ore; you now have 1 ore.
The new clay-collecting robot is ready; you now have 1 of them.

== Minute 4 ==
1 ore-collecting robot collects 1 ore; you now have 2 ore.
1 clay-collecting robot collects 1 clay; you now have 1 clay.

...

== Minute 23 ==
1 ore-collecting robot collects 1 ore; you now have 5 ore.
4 clay-collecting robots collect 4 clay; you now have 37 clay.
2 obsidian-collecting robots collect 2 obsidian; you now have 6 obsidian.
2 geode-cracking robots crack 2 geodes; you now have 7 open geodes.

== Minute 24 ==
1 ore-collecting robot collects 1 ore; you now have 6 ore.
4 clay-collecting robots collect 4 clay; you now have 41 clay.
2 obsidian-collecting robots collect 2 obsidian; you now have 8 obsidian.
2 geode-cracking robots crack 2 geodes; you now have 9 open geodes.
```

([SEE WEBSITE FOR FULL EXAMPLE](https://adventofcode.com/2022/day/19))

However, by using blueprint 2 in the example above, you could do even better: the largest number of geodes you could open in 24 minutes is `12`.

Determine the **quality level** of each blueprint by **multiplying that blueprint's ID number** with the largest number of geodes that can be opened in 24 minutes using that blueprint. In this example, the first blueprint has ID 1 and can open 9 geodes, so its quality level is `9`. The second blueprint has ID 2 and can open 12 geodes, so its quality level is `24`. Finally, if you add up the quality levels of all of the blueprints in the list, you get `33`.

Determine the quality level of each blueprint using the largest number of geodes it could produce in 24 minutes. **What do you get if you add up the quality level of all of the blueprints in your list?**

To begin, [get your puzzle input](https://adventofcode.com/2022/day/19/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

Part Two prompt

**QUESTION TWO?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2022/day/19/input).

## Input

Sample input:

```
Blueprint 1: Each ore robot costs 4 ore. Each clay robot costs 2 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 2 ore and 7 obsidian.
Blueprint 2: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 8 clay. Each geode robot costs 3 ore and 12 obsidian.
```

```elixir
sample_input =
  "Blueprint 1: Each ore robot costs 4 ore. Each clay robot costs 2 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 2 ore and 7 obsidian.\nBlueprint 2: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 8 clay. Each geode robot costs 3 ore and 12 obsidian."

input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
""
```

## Solution

```elixir
defmodule Day19 do
  defdelegate parse(input), to: __MODULE__.Input

  @priority_keys [:geode, :obsidian, :clay, :ore]

  @empty_robots Map.new(@priority_keys, &{&1, 0})

  @initial_state %{
    minute: 0,
    robots: Map.put(@empty_robots, :ore, 1),
    building_robots: @empty_robots,
    ore: 0,
    clay: 0,
    obsidian: 0,
    geode: 0,
    hold_for: nil
  }

  def initial_state(), do: @initial_state

  def part1(input, num_minutes) do
    blueprints = parse(input)

    blueprints
    |> Enum.map(&simulate(@initial_state, &1, num_minutes))
  end

  def part2(input) do
    input
    |> parse()
    |> Enum.map(& &1)
  end

  def simulate(%{minute: minute} = state, _, total_minutes) when minute >= total_minutes,
    do: state

  def simulate(state, blueprint, minutes) do
    state
    |> build_next_robot(blueprint)
    |> mine_resources()
    |> add_built_robots()
    |> Map.update!(:minute, &(&1 + 1))
    |> simulate(blueprint, minutes)
  end

  def can_build?(state, type, blueprint) do
    Map.get(blueprint, type)
    |> Enum.all?(fn {k, cost} -> state[k] >= cost end)
  end

  def mine_resources(%{robots: robots} = state) do
    robots
    |> Enum.reduce(state, fn
      {_, 0}, acc ->
        acc

      {robot_type, count}, acc ->
        Map.update!(acc, robot_type, &(&1 + count))
    end)
  end

  # Recursively decide which one should be built next,
  # Keep doing this until the decision is to not build any more.
  # Return state when we're done building.

  # Which one should we build next? It has something to do with cost ratios.
  def build_next_robot(state, blueprint) do
    build
    Enum.reduce(state, acc ->
      build_robot(acc, robot_type, 1, blueprint)
    end)
  end

  def build_robot(state, type, quantity, blueprint) do
    state
    |> add_robots(type, quantity, :building_robots)
    |> deduct_cost(type, quantity, blueprint)
    |> Map.put(:hold_for, nil)
  end

  def add_robots(state, type, count, robot_key \\ :robots) do
    Map.update!(state, robot_key, fn br ->
      Map.update!(br, type, &(&1 + count))
    end)
  end

  def deduct_cost(state, type, quantity, blueprint) do
    Map.get(blueprint, type)
    |> Enum.reduce(state, fn {cost_type, cost}, acc ->
      Map.update!(acc, cost_type, &(&1 - cost * quantity))
    end)
  end

  def add_built_robots(%{building_robots: br} = state) do
    Enum.reduce(br, state, fn
      {_, 0}, acc -> acc
      {robot_type, num}, acc -> add_robots(acc, robot_type, num, :robots)
    end)
    |> Map.put(:building_robots, @empty_robots)
  end

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.split("\n", trim: true)
      |> parse()
    end

    def parse(input) when is_list(input) do
      Stream.map(input, &parse_line/1)
    end

    def parse_line(line) do
      line
      |> String.split([" ", ":"], trim: true)
      |> Enum.map(&to_int/1)
      |> Enum.reject(&is_nil/1)
      |> then(fn [a, b, c, d, e, f, g] ->
        %{
          index: a,
          ore: %{ore: b},
          clay: %{ore: c},
          obsidian: %{ore: d, clay: e},
          geode: %{ore: f, obsidian: g}
        }
      end)
    end

    defp to_int(x), do: Integer.parse(x) |> return_int(x)

    defp return_int({int, ""}, _), do: int
    defp return_int(:error, _input), do: nil

    def flatten([]), do: []
    def flatten(nil), do: []
    def flatten([[a | _] = path | b]) when is_binary(a), do: [Enum.reverse(path) | flatten(b)]
    def flatten([a | b]), do: flatten(a) ++ flatten(b)
    def flatten(v), do: [v]
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day19, <<70, 79, 82, 49, 0, 0, 33, ...>>,
 {:module, Day19.Input, <<70, 79, 82, ...>>, {:flatten, 1}}}
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
alias AdventOfCode.Y2022.Day19

blueprints =
  Day19.parse(
    "Blueprint 1: Each ore robot costs 4 ore. Each clay robot costs 2 ore. Each obsidian robot costs 3 ore and 14 clay. Each geode robot costs 2 ore and 7 obsidian.\nBlueprint 2: Each ore robot costs 2 ore. Each clay robot costs 3 ore. Each obsidian robot costs 3 ore and 8 clay. Each geode robot costs 3 ore and 12 obsidian."
  )

blueprint = Enum.at(blueprints, 0)
state = Day19.initial_state()
num_days = 10
results = Day19.simulate(state, blueprint, num_days) |> Day19.Input.flatten()
nil
```

<!-- livebook:{"output":true} -->

```
[
  %{
    clay: %{ore: 2},
    geode: %{obsidian: 7, ore: 2},
    index: 1,
    obsidian: %{clay: 14, ore: 3},
    ore: %{ore: 4}
  },
  %{
    clay: %{ore: 3},
    geode: %{obsidian: 12, ore: 3},
    index: 2,
    obsidian: %{clay: 8, ore: 3},
    ore: %{ore: 2}
  }
]
```

```elixir
blueprint = Enum.at(blueprints, 0)
state = Day19.initial_state()

{blueprint, state}
```

<!-- livebook:{"output":true} -->

```
{%{
   clay: %{ore: 2},
   geode: %{obsidian: 7, ore: 2},
   index: 1,
   obsidian: %{clay: 14, ore: 3},
   ore: %{ore: 4}
 },
 %{
   building_robots: %{clay: 0, geode: 0, obsidian: 0, ore: 0},
   clay: 0,
   geode: 0,
   hold_for: nil,
   minute: 0,
   obsidian: 0,
   ore: 0,
   robots: %{clay: 0, geode: 0, obsidian: 0, ore: 1}
 }}
```

```elixir
Day19.simulate(state, blueprint, 10)
```

<!-- livebook:{"output":true} -->

```
...
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 6 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 6 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 7 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 8 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 9 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
== MINUTE 10 ==
```

**QUESTION ONE?**

Your puzzle answer was `answer one`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day19.part1(1)
```

<!-- livebook:{"output":true} -->

```
[""]
```

**QUESTION TWO?**

Your puzzle answer was `answer two`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day19.part2(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2022) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2022/day/19/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day19Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input: ""
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day19.part1(input) == [""]
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day19.part2(input) == [""]
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 162351
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```

## Benchmarking

```elixir
defmodule Benchmark do
  def fun1(input) do
    Day19.part1(input)
  end

  def fun2(input) do
    Day19.part2(input)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Benchmark, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:fun2, 1}}
```

```elixir
# https://github.com/bencheeorg/benchee
input = Day19.Input.parse(input) |> Enum.to_list()

Benchee.run(
  %{
    "fun1" => fn _ -> Benchmark.fun1(input) end,
    "fun2" => fn _ -> Benchmark.fun2(input) end
  },
  inputs: %{
    "Part 1" => 1
  },
  memory_time: 2,
  reduction_time: 2
)

nil
```

<!-- livebook:{"output":true} -->

```

```

<!-- livebook:{"output":true} -->

```
nil
```
