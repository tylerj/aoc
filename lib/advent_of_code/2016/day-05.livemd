<!-- livebook:{"persist_outputs":true} -->

# Day 5 - Advent of Code 2016

```elixir
Mix.install([:kino, :benchee])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2016/day/5)
* [AoC Puzzle Input](https://adventofcode.com/2016/day/5/input)
* [tylerj GitHub - Code](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2016/day_05.ex)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2016/day-05.livemd)

## Prompt

### --- Day 5: How About a Nice Game of Chess? ---

You are faced with a security door designed by Easter Bunny engineers that seem to have acquired most of their security knowledge by watching [hacking movies](https://en.wikipedia.org/wiki/Hackers_(film)).

The **eight-character password** for the door is generated one character at a time by finding the [MD5](https://en.wikipedia.org/wiki/MD5) hash of some Door ID (your puzzle input) and an increasing integer index (starting with 0).

A hash indicates the **next character** in the password if its [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) representation starts with **five zeroes**. If it does, the sixth character in the hash is the next character of the password.

For example, if the Door ID is `abc`:

* The first index which produces a hash that starts with five zeroes is `3231929`, which we find by hashing `abc3231929`; the sixth character of the hash, and thus the first character of the password, is `1`.
* `5017308` produces the next interesting hash, which starts with `000008f82...`, so the second character of the password is `8`.
* The third time a hash starts with five zeroes is for `abc5278568`, discovering the character `f`.

In this example, after continuing this search a total of eight times, the password is `18f47a30`.

**Given the actual Door ID, what is the password?**

Your puzzle input is `uqwqemis`.

To begin, [get your puzzle input](https://adventofcode.com/2016/day/5/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

Part Two prompt

**QUESTION TWO?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2016/day/5/input).

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
"uqwqemis"
```

## Solution

```elixir
defmodule Day05 do
  defdelegate parse(input), to: __MODULE__.Input

  def part1(input) do
    input
    |> parse()
    |> Enum.map(& &1)
  end

  def part2(input) do
    input
    |> parse()
    |> Enum.map(& &1)
  end

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.split("\n")
      |> parse()
    end

    def parse(input) when is_list(input) do
      Stream.map(input, &parse_line/1)
    end

    def parse_line(line) do
      line
      # |> String.split(["-", ","])
      # |> Enum.map(&String.to_integer/1)
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day05, <<70, 79, 82, 49, 0, 0, 8, ...>>,
 {:module, Day05.Input, <<70, 79, 82, ...>>, {:parse_line, 1}}}
```

**Given the actual Door ID, what is the password?**

Your puzzle answer was `answer one`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day05.part1(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

**QUESTION TWO?**

Your puzzle answer was `answer two`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day05.part2(input)
```

<!-- livebook:{"output":true} -->

```
[""]
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2016) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2016/day/5/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day05Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input: ""
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day05.part1(input) == [""]
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day05.part2(input) == [""]
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 162351
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```

## Benchmarking

```elixir
defmodule Benchmark do
  def fun1(input) do
    Day05.part1(input)
  end

  def fun2(input) do
    Day05.part2(input)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Benchmark, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:fun2, 1}}
```

```elixir
# https://github.com/bencheeorg/benchee
input = Day05.Input.parse(input) |> Enum.to_list()

Benchee.run(
  %{
    "fun1" => fn _ -> Benchmark.fun1(input) end,
    "fun2" => fn _ -> Benchmark.fun2(input) end
  },
  inputs: %{
    "Part 1" => 1
  },
  memory_time: 2,
  reduction_time: 2
)

nil
```

<!-- livebook:{"output":true} -->

```

```

<!-- livebook:{"output":true} -->

```
nil
```
