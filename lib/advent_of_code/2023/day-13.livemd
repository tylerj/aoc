<!-- livebook:{"persist_outputs":true} -->

# Day 13 - Advent of Code 2023

```elixir
Mix.install([:kino, :benchee])
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2023/day/13)
* [AoC Puzzle Input](https://adventofcode.com/2023/day/13/input)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2023/day-13.livemd)

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
"#.###.##..#....\n.#.###.....####\n...##...###.##.\n...######..#..#\n##.#..#.##..##.\n.#.##..#....##.\n##..##.#...####\n.####..##.#####\n#.####.#....##.\n..#.###.#..#..#\n##...####...##.\n##...####...##.\n..#.###.#..#..#\n#.###..#....##.\n.####..##.#####\n\n##..#.#......#..#\n.....#..#.#######\n...########...##.\n..#.#.#.###...##.\n..#.#..#.#.#.#..#\n..##...#.##.#.##.\n###.####..##.#...\n....#..#.#..#.##.\n....#.###..##....\n..##.#..##.######\n...##..#.#.##....\n...#.#..#........\n###....##..######\n..#...##..##.#..#\n..#.......#...##.\n\n#####.###\n.#.###..#\n##...##.#\n....###.#\n....###.#\n##...##.#\n.#.###..#\n#####.###\n..##.#.##\n###...##.\n.##.#.###\n.##.#.#.#\n###...##.\n\n..###...#####\n#######..#..#\n########.#..#\n..###...#####\n##.###..#####\n#.....###.##.\n#..###..##..#\n.#.#.##...##.\n.#.##########\n..###.###.##.\n####..#.#....\n##.##.....##.\n###...##.....\n...#.#.##....\n.##..#.#.#..#\n\n#......#...\n.#.#.##....\n##..####.##\n...##....##\n..#...##...\n#..#.......\n##..#.#..##\n###..#.####\n###..#.#.##\n\n..#......#...\n###.####.####\n.#..#..#.##..\n.#..#..#..#..\n##..####..###\n##..####..###\n.....##......\n.###.##.###..\n##..####..###\n#.########.##\n.##......##..\n.#..#..#..#..\n#...####...##\n\n#....##.#..#.##\n.#..#.##.####.#\n.#..#.##.####.#\n#....##.#..####\n#.##.#..#.####.\n......#..#....#\n.#..#...#..##.#\n.#..#.###.##.##\n..##...##...#.#\n......#.####.#.\n#.##.#..#......\n..##...###.#.#.\n......#..##.#.#\n\n..##.######\n##.....#..#\n..#.###.##.\n#.###..####\n.##.#..#..#\n.##....#..#\n#.###..####\n\n...#.####.#\n##.#..##..#\n##.........\n..##..##..#\n##..#....#.\n##....##...\n..#........\n##..#.##.#.\n...#......#\n...#.###..#\n...########\n####..##..#\n..#.##..##.\n###..####..\n..#.######.\n\n##.....###...\n##.....###...\n##.##.####.##\n###..###.##..\n........#..#.\n#.#..#.#..##.\n##.##.###..#.\n\n...##.####.#.#.\n..####.#...#...\n.....##.#.#..##\n##.....###.#.#.\n######.###.#...\n##.##....#.####\n...#.####..####\n..###....##.##.\n..###..#...#..#\n..###..##..#..#\n..###....##.##.\n...#.####..####\n##.##....#.####\n######.###.#...\n##.....###.#.#.\n\n##.#####.####..\n..#.##..#.##.#.\n..#.########...\n###.###.###....\n...#####.##.#..\n##.#..#..#...#.\n...##....#..#..\n##..##...##.##.\n##..##..####.#.\n##....#.#.##..#\n###...#.#.##..#\n##..##..####.#.\n##..##...##.##.\n\n...#.##.##.##.#..\n#....#..##..#....\n.#..#.##..##.#..#\n.#..#.##..##.#..#\n#....#..##..#....\n...#.##.##.##.#..\n####.##....##.###\n.#.##........##.#\n######.#..#.#####\n#.##...#..#...#..\n.#.#....##....#.#\n....#.#.##.#.#...\n##..###.##.###..#\n#.#.#.#....#.#.#.\n.######....######\n\n..#..###.\n..#.#.###\n..#...###\n.##....##\n....#.#.#\n####.##..\n####.##..\n....#.#.#\n.##....##\n..#...###\n..#.#.###\n\n....##.##\n#.##.....\n###....#.\n###....#.\n#.##.....\n....##.##\n#.#..####\n#.#.....#\n.##.#.#.#\n##...#.#.\n##...#.#.\n.#..#.#.#\n#.#.....#\n#.#..####\n....##.##\n#.##.....\n###....#.\n\n###.#........\n#.#.#.#.##.#.\n##.##.#.##.#.\n..##.#.#..#.#\n.##...#....#.\n.#...##.##.##\n.#...##.##.##\n.##...#....#.\n..##.#.#..#.#\n##.##.#.##.#.\n#.#...#.##.#.\n###.#........\n#.....#.##.#.\n\n#.##..###..####\n.##...#..###..#\n.##...#..#.#..#\n.#.######..##.#\n#....##.###.###\n.###..#.##.##..\n...#.#.##..#...\n#.........###.#\n###.#.....##..#\n###.#.....##..#\n#.........###.#\n...#.#.##..#...\n.###..#.##.##..\n#....##.###.###\n.#.######..##.#\n.##...#..#.#..#\n.##...#..###..#\n\n.....######....\n..#.#..##..#.#.\n##.#........#.#\n###....##....##\n##.....##.....#\n..############.\n..#...#..#.....\n\n##...##\n#..###.\n#...#.#\n#...#.#\n#..###.\n##...##\n###.##.\n#.#..##\n..##..#\n.#..#..\n#.##..#\n#....#.\n#....#.\n#.#...#\n.#..#..\n\n#..##.###..\n.##....#.#.\n......##.#.\n#..#.###.##\n######.....\n######.....\n#..#.######\n\n...##..##.#..###.\n..#.#..#.#....##.\n####.##.####....#\n.##.#..#.##..#..#\n.#.#....#.#...###\n##..####..###..#.\n##..####..###..#.\n.#.#....#.#...###\n.##.#..#.##..#..#\n####.##.####....#\n..#.#..#.#....##.\n\n####.#...\n...#.####\n##...##..\n###.#....\n..#.#.#..\n###....##\n####.####\n..##.#..#\n##.###..#\n.#.#..#.#\n###.###..\n###.#.###\n######.#.\n..#.#.###\n####....#\n####....#\n..#.#.###\n\n#..##..##..##..##\n##.#....####....#\n##.######..######\n...######..######\n#..#.##.#..#.##.#\n#####.########.##\n###..##..##..##..\n\n###....####\n####...##.#\n##.##.##..#\n####..##..#\n##.##.#.##.\n##.###.####\n####.######\n####.#..##.\n....." <> ...
```

## Solution

```elixir
defmodule Day13 do
  defdelegate parse(input), to: __MODULE__.Input

  def part1(input) do
    input
    |> parse()
    |> Stream.map(&find_reflection/1)
    |> Stream.map(fn
      {:x, x} -> x
      {:y, y} -> y * 100
    end)
    |> Enum.sum()
  end

  def part2(input) do
    input
    |> parse()
    |> Stream.map(&find_smudge_reflection/1)
    |> Stream.map(fn
      {:x, x} -> x
      {:y, y} -> y * 100
    end)
    |> Enum.sum()
  end

  defp find_smudge_reflection(grid) do
    reflection = find_reflection(grid)

    grid
    |> Enum.find_value(fn
      {{x, y}, ?.} ->
        find_reflection(Map.put(grid, {x, y}, ?#), reflection)

      {{x, y}, ?#} ->
        find_reflection(Map.put(grid, {x, y}, ?.), reflection)

      _ ->
        nil
    end)
  end

  defp find_reflection(grid, reflection \\ nil) do
    x =
      Enum.find(1..grid.max_x, fn x ->
        reflection != {:x, x} and is_reflection?(:x, x, grid)
      end)

    y =
      Enum.find(1..grid.max_y, fn y ->
        reflection != {:y, y} and is_reflection?(:y, y, grid)
      end)

    cond do
      is_integer(x) -> {:x, x}
      is_integer(y) -> {:y, y}
      true -> nil
    end
  end

  def is_reflection?(:x, line_x, grid) do
    Enum.all?(0..grid.max_y, fn y ->
      Enum.all?((line_x - 1)..0, fn x ->
        a = grid[{x, y}]
        b = grid[{2 * line_x - x - 1, y}]
        is_nil(a) or is_nil(b) or a == b
      end)
    end)
  end

  def is_reflection?(:y, line_y, grid) do
    Enum.all?(0..grid.max_x, fn x ->
      Enum.all?((line_y - 1)..0, fn y ->
        a = grid[{x, y}]
        b = grid[{x, 2 * line_y - y - 1}]
        is_nil(a) or is_nil(b) or a == b
      end)
    end)
  end

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.splitter("\n\n", trim: true)
      |> Stream.map(&parse_grid/1)
    end

    def parse(input) do
      Stream.map(input, &parse_grid/1)
    end

    def parse_grid(input) do
      input
      |> String.split("\n", trim: true)
      |> Enum.with_index()
      |> Enum.reduce(%{}, &parse_line/2)
      |> add_max_xy()
    end

    def parse_line({line, row}, grid) do
      line
      |> String.to_charlist()
      |> Enum.with_index()
      |> Enum.reduce(grid, fn {char, col}, acc ->
        Map.put(acc, {col, row}, char)
      end)
    end

    defp add_max_xy(grid) do
      x = Map.keys(grid) |> Enum.map(&elem(&1, 0)) |> Enum.max()
      y = Map.keys(grid) |> Enum.map(&elem(&1, 1)) |> Enum.max()

      Map.merge(grid, %{max_x: x, max_y: y})
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day13, <<70, 79, 82, 49, 0, 0, 23, ...>>,
 {:module, Day13.Input, <<70, 79, 82, ...>>, {:add_max_xy, 1}}}
```

Find the line of reflection in each of the patterns in your notes. **What number do you get after summarizing all of your notes?**

Your puzzle answer was `34918`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day13.part1(input)
```

<!-- livebook:{"output":true} -->

```
34918
```

In each pattern, fix the smudge and find the different line of reflection. **What number do you get after summarizing the new reflection line in each pattern in your notes?**

Your puzzle answer was `33054`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day13.part2(input)
```

<!-- livebook:{"output":true} -->

```
33054
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2023) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2023/day/13/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day13Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input:
        "#.##..##.\n..#.##.#.\n##......#\n##......#\n..#.##.#.\n..##..##.\n#.#.##.#.\n\n#...##..#\n#....#..#\n..##..###\n#####.##.\n#####.##.\n..##..###\n#....#..#"
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day13.part1(input) == 405
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day13.part2(input) == 400
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 648000
```

<!-- livebook:{"output":true} -->

```
%{total: 2, failures: 0, excluded: 0, skipped: 0}
```

## Benchmarking

```elixir
# https://github.com/bencheeorg/benchee
Benchee.run(
  %{
    "Part 1" => fn -> Day13.part1(input) end,
    "Part 2" => fn -> Day13.part2(input) end
  },
  memory_time: 2,
  reduction_time: 2
)

nil
```

<!-- livebook:{"output":true} -->

```
Warning: the benchmark Part 1 is using an evaluated function.
  Evaluated functions perform slower than compiled functions.
  You can move the Benchee caller to a function in a module and invoke `Mod.fun()` instead.
  Alternatively, you can move the benchmark into a benchmark.exs file and run mix run benchmark.exs

Warning: the benchmark Part 2 is using an evaluated function.
  Evaluated functions perform slower than compiled functions.
  You can move the Benchee caller to a function in a module and invoke `Mod.fun()` instead.
  Alternatively, you can move the benchmark into a benchmark.exs file and run mix run benchmark.exs

Operating System: macOS
CPU Information: Apple M1 Pro
Number of Available Cores: 10
Available memory: 32 GB
Elixir 1.15.6
Erlang 26.1

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 5 s
memory time: 2 s
reduction time: 2 s
parallel: 1
inputs: none specified
Estimated total run time: 22 s

Benchmarking Part 1 ...
Benchmarking Part 2 ...

Name             ips        average  deviation         median         99th %
Part 1        233.57        4.28 ms     ±1.86%        4.28 ms        4.50 ms
Part 2         14.09       70.95 ms     ±0.56%       70.85 ms       73.21 ms

Comparison: 
Part 1        233.57
Part 2         14.09 - 16.57x slower +66.67 ms

Memory usage statistics:

Name           average  deviation         median         99th %
Part 1         7.41 MB     ±0.05%        7.41 MB        7.42 MB
Part 2        89.69 MB     ±0.01%       89.69 MB       89.70 MB

Comparison: 
Part 1         7.41 MB
Part 2        89.69 MB - 12.10x memory usage +82.28 MB

Reduction count statistics:

Name   Reduction count
Part 1          0.47 M
Part 2          9.58 M - 20.39x reduction count +9.11 M

**All measurements for reduction count were the same**
```

<!-- livebook:{"output":true} -->

```
nil
```
