<!-- livebook:{"persist_outputs":true} -->

# Day 21 - Advent of Code 2023

```elixir
Mix.install([:kino, :benchee])
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2023/day/21)
* [AoC Puzzle Input](https://adventofcode.com/2023/day/21/input)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2023/day-01.livemd)

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
```

<!-- livebook:{"output":true} -->

```
"...................................................................................................................................\n...##......#....#...#.....#.#....#...#...#...#......#........................##......#..#..#.#........#....................##......\n...#.......#..........#..#....#................#...##.....##...................#..........###......#.....#.........#....#.#........\n........#..##.............#..#...##...#..#...##...............................#.........................#..........................\n..............#............#..#..........#.#.#....#...#......................#..#......#.##...#............................#.......\n..##...............#...#...#......#.......................................#..............##...............#.....#...........#...#..\n.##............#.................#...#..#......#...................................#.......#.#..#......##................##........\n......###...#...#........#..............#....#.......##.......................##.......#..#.......#.........#...................#..\n.................#...........................................#......................#.....#.....##...........#...............#.....\n..#...#....#.......##...........#..#.............#............................##........#.......#...#...#...#....#....##...........\n..............#..#.....#.....#.........#..#..#..#..#.......#.#..#....##........#.....#.........#..............#........#..#...#....\n...##...............#...#.#....#............##..#.......................................#.......#...........#..#...........##....#.\n.......................................#......#...........#..........#.............#..........##.............#....#..##....#.......\n..................................#.............#........#...#.##.....................#....................#.##....#.............#.\n.#......##...#......#..#...#...........#...#.............#.............#..#.........#..#.#........#.#...........#..................\n............#............#..........#........#..........#.....#.#...#.......#........#.#...........#....#.............#.........#..\n.....#.......##............#...#.#.#...#...#..............##..#....#......#......................#...#...#..........#......#.#.....\n........#....#....#......#..........#........................#.....#....................................#.....#....#..##.##....#...\n............#.................#.##.........#.........#.....#........#.........#........#....###...........#.............#..........\n....##....#..#............#...#.#..#.........................#.#....##.....................#........#.........#....#....#........#.\n...#...#...........#..#..................#.......#.#..#............................................##................#.............\n...........#......#....#........#.#..........................#.#......#......##.............#..#...#...#.#..................#..#...\n.............................#........#............#........#........#.#.......#...............##....#........#...#..#..#..........\n..................................#...........................#.#..#.........................#...#.#......#..............##.....##.\n........................#..........................#..................#...#............................#.......#...........#...##..\n.......#.#.....#....#.....#................................##...#.........##..#.....................#..............................\n......#........##..........#.................#..##......#..#.......#..........#....................................................\n....#..........#......................................................##.#..#.#.##..................#......#............##...#.....\n.............#..........#.#..............................................#.#........#....#...........#.......................#.....\n..#.............#....#........#.#..............#.......#......#.#..#......#.#...........................................##.........\n..#.....#.....#....#...#....#..........#......#..............................#...........#............#..#.....##..........#.......\n...." <> ...
```

## Solution

```elixir
defmodule Day21 do
  defdelegate parse(input), to: __MODULE__.Input

  def part1(input, num_steps) do
    {grid, start} = parse(input)

    make_step([start], grid, num_steps, :part1) |> length()
  end

  def part2(input, num_steps) do
    {grid, start} = parse(input)

    make_step([start], grid, num_steps, :part2) |> length()
  end

  defp make_step(locations, grid, max_steps, count \\ 0, part)

  defp make_step(locations, grid, max_steps, count, part) when count < max_steps do
    locations
    |> Enum.flat_map(&next_locations(&1, grid, part))
    |> Enum.uniq()
    |> tap(fn x -> IO.puts("#{count + 1}:#{length(x)}") end)
    |> make_step(grid, max_steps, count + 1, part)
  end

  defp make_step(locations, _, _, _, _), do: locations

  defp next_locations({x, y}, grid, part) do
    [{x, y - 1}, {x + 1, y}, {x, y + 1}, {x - 1, y}]
    |> Enum.map(fn xy ->
      new_xy = converted_xy(xy, grid.max_x, grid.max_y, part)
      if grid[new_xy] == ?., do: xy
    end)
    |> Enum.reject(&is_nil/1)
  end

  defp converted_xy(xy, _max_x, _max_y, :part1), do: xy

  defp converted_xy({x, y}, max_x, max_y, :part2) do
    {
      convert_value(x, max_x),
      convert_value(y, max_y)
    }
  end

  def convert_value(value, max) when value >= 0,
    do: rem(value, max + 1)

  def convert_value(value, max) do
    case value |> abs() |> rem(max + 1) do
      0 -> 0
      offset -> max + 1 - offset
    end
  end

  defmodule Input do
    def parse(input) do
      input
      |> String.splitter("\n", trim: true)
      |> Stream.with_index()
      |> Enum.reduce({%{}, nil}, &parse_line/2)
      |> add_max_xy()
    end

    defp parse_line({line, row}, {grid, start}) do
      line
      |> String.to_charlist()
      |> Enum.with_index()
      |> Enum.reduce({grid, start}, fn
        {?S, col}, {grid, nil} ->
          {Map.put(grid, {col, row}, ?.), {col, row}}

        {char, col}, {grid, start} ->
          {Map.put(grid, {col, row}, char), start}
      end)
    end

    defp add_max_xy({grid, start}) do
      x = Map.keys(grid) |> Enum.map(&elem(&1, 0)) |> Enum.max()
      y = Map.keys(grid) |> Enum.map(&elem(&1, 1)) |> Enum.max()

      {Map.merge(grid, %{max_x: x, max_y: y}), start}
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day21, <<70, 79, 82, 49, 0, 0, 20, ...>>,
 {:module, Day21.Input, <<70, 79, 82, ...>>, {:add_max_xy, 1}}}
```

Starting from the garden plot marked S on your map, **how many garden plots could the Elf reach in exactly 64 steps?**

Your puzzle answer was `3795`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day21.part1(input, 64)
```

<!-- livebook:{"output":true} -->

```
1:4
2:8
3:14
4:23
5:34
6:45
7:56
8:72
9:86
10:107
11:123
12:150
13:170
14:196
15:226
16:257
17:290
18:322
19:354
20:393
21:422
22:473
23:501
24:555
25:589
26:648
27:691
28:754
29:796
30:859
31:901
32:970
33:1022
34:1089
35:1143
36:1215
37:1276
38:1349
39:1417
40:1498
41:1563
42:1651
43:1715
44:1802
45:1874
46:1962
47:2037
48:2125
49:2203
50:2300
51:2390
52:2490
53:2570
54:2681
55:2769
56:2875
57:2961
58:3072
59:3159
60:3282
61:3372
62:3531
63:3632
64:3795
```

<!-- livebook:{"output":true} -->

```
3795
```

Starting from the garden plot marked S on your infinite map, **how many garden plots could the Elf reach in exactly 26501365 steps?**

Your puzzle answer was `answer two`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day21.part2(input, 5000)
```

<!-- livebook:{"output":true} -->

```
1:4
2:8
3:14
4:23
5:34
6:45
7:56
8:72
9:86
10:107
11:123
12:150
13:170
14:196
15:226
16:257
17:290
18:322
19:354
20:393
21:422
22:473
23:501
24:555
25:589
26:648
27:691
28:754
29:796
30:859
31:901
32:970
33:1022
34:1089
35:1143
36:1215
37:1276
38:1349
39:1417
40:1498
41:1563
42:1651
43:1715
44:1802
45:1874
46:1962
47:2037
48:2125
49:2203
50:2300
51:2390
52:2490
53:2570
54:2681
55:2769
56:2875
57:2961
58:3072
59:3159
60:3282
61:3372
62:3531
63:3632
64:3795
65:3893
66:4059
67:4161
68:4331
69:4405
70:4581
71:4657
72:4841
73:4919
74:5106
75:5188
76:5382
77:5466
78:5670
79:5746
80:5948
81:6032
82:6239
83:6326
84:6543
85:6618
86:6855
87:6926
88:7178
89:7230
90:7496
91:7563
92:7829
93:7901
94:8162
95:8245
96:8507
97:8603
98:8848
99:8952
100:9203
101:9311
102:9567
103:9683
104:9942
105:10062
106:10316
107:10448
108:10698
109:10831
110:11089
111:11239
112:11485
113:11628
114:11890
115:12041
116:12315
117:12470
118:12726
119:12890
120:13152
121:13313
122:13577
123:13749
124:14037
125:14221
126:14474
127:14681
128:14927
129:15153
130:15388
131:15626
132:15861
133:16108
134:16331
135:16611
136:16811
137:17108
138:17303
139:17611
140:17801
141:18094
142:18291
143:18604
144:18796
145:19121
146:19332
147:19662
148:19875
149:20185
150:20392
151:20724
152:20924
153:21281
154:21471
155:21826
156:22019
157:22390
158:22598
159:22981
160:23170
161:23548
162:23737
163:24120
164:24324
165:24709
166:24911
167:25315
168:25514
169:25922
170:26126
171:26555
172:26739
173:27166
174:27358
175:27769
176:27994
177:28384
178:28619
179:29002
180:29246
181:29639
182:29896
183:30304
184:30542
185:30959
186:31213
187:31619
188:31868
189:32277
190:32522
191:32947
192:33203
193:33692
194:33995
195:34491
196:34785
197:35279
198:35577
199:36075
200:36313
201:36792
202:37028
203:37505
204:37747
205:38230
206:38481
207:38976
208:39229
209:39736
210:39975
211:40483
212:40724
213:41228
214:41474
215:41996
216:42218
217:42782
218:42988
219:43582
220:43750
221:44365
222:44571
223:45172
224:45378
225:45972
226:46194
227:46783
228:47026
229:47584
230:47838
231:48402
232:48658
233:49234
234:49508
235:50085
236:50362
237:50924
238:51216
239:51762
240:52058
241:52615
242:52950
243:53473
244:53790
245:54346
246:54680
247:55254
248:55584
249:56122
250:56465
251:57012
252:57348
253:57892
254:58246
255:58833
256:59212
257:59727
258:60148
259:60644
260:61099
261:61570
262:62045
263:62512
264:63002
265:63442
266:63993
267:64382
268:64965
269:65344
270:65944
271:66310
272:66875
273:67253
274:67852
275:68216
276:68840
277:69232
278:69861
279:70254
280:70842
281:71224
282:71849
283:72220
284:72883
285:73235
286:73891
287:74243
288:74926
289:75299
290:76002
291:76338
292:77031
293:77367
294:78064
295:78420
296:79123
297:79473
298:80209
299:80546
300:81289
301:81629
302:82406
303:82709
304:83475
305:83795
306:84530
307:84908
308:85600
309:85995
310:86673
311:87083
312:87772
313:88196
314:88912
315:89308
316:90031
317:90451
318:91157
319:91569
320:92276
321:92679
322:93406
323:93828
324:94647
325:95152
326:95981
327:96471
328:97293
329:97787
330:98613
331:99015
332:99797
333:100193
334:100963
335:101369
336:102148
337:102568
338:103364
339:103786
340:104596
341:104998
342:105812
343:106210
344:107011
345:107416
346:108243
347:108612
348:109503
349:109844
350:110780
351:111064
352:112028
353:112373
354:113309
355:113649
356:114576
357:114937
358:115853
359:116243
360:117114
361:117518
362:118395
363:118799
364:119695
365:120127
366:121022
367:121456
368:122326
369:122778
370:123620
371:124079
372:124935
373:125455
374:126255
375:126746
376:127596
377:128113
378:128987
379:129492
380:130312
381:130834
382:131666
383:132177
384:133001
385:133537
386:134423
387:134997
388:135774
389:136409
390:137155
391:137839
392:138546
393:139258
394:139957
395:140690
396:141347
397:142169
398:142747
399:143616
400:144179
401:145071
402:145613
403:146450
404:147009
405:147894
406:148430
407:149353
408:149926
409:150854
410:151427
411:152293
412:152850
413:153768
414:154310
415:155279
416:155793
417:156750
418:157261
419:158256
420:158794
421:159817
422:160300
423:161308
424:161791
425:162802
426:163310
427:164331
428:164829
429:165897
430:166372
431:167450
432:167926
433:169051
434:169473
435:170578
436:171026
437:172085
438:172616
439:173610
440:174165
441:175138
442:175714
443:176699
444:177290
445:178314
446:178868
447:179897
448:180483
449:181489
450:182064
451:183069
452:183630
453:184659
454:185247
455:186396
456:187103
457:188265
458:188951
459:190101
460:190791
461:191945
462:192511
463:193596
464:194152
465:195215
466:195785
467:196860
468:197449
469:198546
470:199137
471:200250
472:200815
473:201935
474:202490
475:203588
476:204152
477:205284
478:205800
479:207018
480:207494
481:208772
482:209172
483:210485
484:210969
485:212240
486:212714
487:213974
488:214474
489:215717
490:216254
491:217438
492:217992
493:219182
494:219734
495:220950
496:221540
497:222753
498:223344
499:224522
500:225134
501:226272
502:226894
503:228049
504:228754
505:229831
506:230496
507:231640
508:232340
509:233514
510:234194
511:235296
512:235997
513:237114
514:237800
515:238904
516:239622
517:240807
518:241576
519:242615
520:243464
521:244460
522:245373
523:246316
524:247265
525:248196
526:249172
527:250046
528:251139
529:251906
530:253061
531:253808
532:254992
533:255710
534:256819
535:257559
536:258730
537:259438
538:260660
539:261414
540:262641
541:263394
542:264538
543:265270
544:266481
545:267194
546:268469
547:269145
548:270403
549:271073
550:272380
551:273083
552:274426
553:275056
554:276379
555:277009
556:278334
557:278994
558:280333
559:280979
560:282379
561:282992
562:284405
563:285017
564:286490
565:287031
566:288475
567:289051
568:290434
569:291118
570:292414
571:293129
572:294397
573:295139
574:296420
575:297178
576:298510
577:299222
578:300557
579:301309
580:302615
581:303353
582:304656
583:305375
584:306706
585:307460
586:308939
587:309848
588:311343
589:312225
590:313703
591:314589
592:316071
593:316801
594:318189
595:318905
596:320261
597:320995
598:322366
599:323124
600:324522
601:325282
602:326698
603:327426
604:328852
605:329564
606:330959
607:331682
608:333119
609:333782
610:335327
611:335938
612:337558
613:338074
614:339736
615:340359
616:341965
617:342573
618:344166
619:344805
620:346375
621:347059
622:348556
623:349260
624:350763
625:351463
626:352999
627:353747
628:355278
629:356026
630:357512
631:358284
632:359718
633:360503
634:361957
635:362847
636:364201
637:365040
638:366478
639:367361
640:368835
641:369690
642:371074
643:371954
644:373356
645:374217
646:375601
647:376501
648:377985
649:378949
650:380250
651:381313
652:382559
653:383701
654:384880
655:386066
656:387229
657:388448
658:389539
659:390903
660:391859
661:393300
662:394231
663:395707
664:396601
665:397982
666:398903
667:400360
668:401240
669:402761
670:403696
671:405222
672:406155
673:407577
674:408484
675:409988
676:410872
677:412453
678:413291
679:414850
680:415679
681:417298
682:418166
683:419829
684:420606
685:422244
686:423021
687:424660
688:425472
689:427129
690:427923
691:429655
692:430406
693:432154
694:432902
695:434723
696:435383
697:437166
698:437870
699:439577
700:440414
701:442012
702:442887
703:444450
704:445358
705:446935
706:447860
707:449500
708:450370
709:452011
710:452929
711:454535
712:455436
713:457037
714:457914
715:459547
716:460467
717:462276
718:463387
719:465215
720:466293
721:468099
722:469181
723:470991
724:471885
725:473576
726:474452
727:476101
728:476999
729:478666
730:479593
731:481292
732:482221
733:483940
734:484831
735:486563
736:487432
737:489124
738:490006
739:491748
740:492558
741:494430
742:495176
743:497138
744:497770
745:499781
746:500543
747:502484
748:503226
749:505152
750:505930
751:507827
752:508658
753:510468
754:511322
755:513138
756:513986
757:515842
758:516748
759:518597
760:519502
761:521296
762:522228
763:523958
764:524906
765:526659
766:527734
767:529365
768:530378
769:532110
770:533176
771:534950
772:535980
773:537646
774:538705
775:540392
776:541428
777:543092
778:544174
779:545957
780:547116
781:548679
782:549956
783:551452
784:552823
785:554238
786:555661
787:557056
788:558518
789:559826
790:561461
791:562606
792:564333
793:565448
794:567216
795:568286
796:569939
797:571041
798:572784
799:573836
800:575656
801:576772
802:578597
803:579710
804:581410
805:582492
806:584289
807:585344
808:587231
809:588231
810:590091
811:591079
812:593010
813:594043
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2023) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2023/day/21/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day21Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input:
        "...........\n.....###.#.\n.###.##..#.\n..#.#...#..\n....#.#....\n.##..S####.\n.##..#...#.\n.......##..\n.##.#.####.\n.##..##.##.\n..........."
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day21.part1(input, 6) == 16
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day21.part2(input, 6) == 16
      assert Day21.part2(input, 10) == 50
      assert Day21.part2(input, 50) == 1594
      assert Day21.part2(input, 100) == 6536
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
1:2
2:4
3:6
4:9
5:13
6:16
1:2
2:4
3:6
4:9
5:13
6:16
7:22
8:30
9:41
10:50
1:2
2:4
3:6
4:9
5:13
6:16
7:22
8:30
9:41
10:50
11:63
12:74
13:89
14:99
15:115
16:129
17:145
18:165
19:192
20:216
21:234
22:261
23:294
24:326
25:353
26:395
27:427
28:460
29:491
30:537
31:574
32:605
33:644
34:689
35:740
36:784
37:846
38:894
39:944
40:989
41:1053
42:1107
43:1146
44:1196
45:1256
46:1324
47:1383
48:1464
49:1528
50:1594
1:2
2:4
3:6
4:9
5:13
6:16
7:22
8:30
9:41
10:50
11:63
12:74
13:89
14:99
15:115
16:129
17:145
18:165
19:192
20:216
21:234
22:261
23:294
24:326
25:353
26:395
27:427
28:460
29:491
30:537
31:574
32:605
33:644
34:689
35:740
36:784
37:846
38:894
39:944
40:989
41:1053
42:1107
43:1146
44:1196
45:1256
46:1324
47:1383
48:1464
49:1528
50:1594
51:1653
52:1735
53:1805
54:1853
55:1914
56:1988
57:2072
58:2145
59:2244
60:2324
61:2406
62:2479
63:2579
64:2665
65:2722
66:2794
67:2882
68:2982
69:3069
70:3186
71:3282
72:3380
73:3467
74:3585
75:3687
76:3753
77:3836
78:3938
79:4054
80:4155
81:4290
82:4402
83:4516
84:4617
85:4753
86:4871
87:4946
88:5040
89:5156
90:5288
91:5403
92:5556
93:5684
94:5814
95:5929
96:6083
97:6217
98:6301
99:6406
100:6536
.1:2
2:4
3:6
4:9
5:13
6:16
.
Finished in 0.1 seconds (0.00s async, 0.1s sync)
2 tests, 0 failures

Randomized with seed 278444
```

<!-- livebook:{"output":true} -->

```
%{total: 2, excluded: 0, failures: 0, skipped: 0}
```

## Benchmarking

```elixir
defmodule Benchmarking do
  # https://github.com/bencheeorg/benchee
  def run(input) do
    Benchee.run(
      %{
        "Part 1" => fn -> Day21.part1(input) end,
        "Part 2" => fn -> Day21.part2(input) end
      },
      memory_time: 2,
      reduction_time: 2
    )

    nil
  end
end
```

<!-- livebook:{"output":true} -->

```

```

<!-- livebook:{"output":true} -->

```
nil
```

```elixir
Benchmarking.run(input)
```
