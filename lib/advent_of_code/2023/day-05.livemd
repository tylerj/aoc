<!-- livebook:{"persist_outputs":true} -->

# Day 5 - Advent of Code 2023

```elixir
Mix.install([:kino, :benchee])
```

## Links

* [Advent of Code (AoC)](https://adventofcode.com/2023/day/5)
* [AoC Puzzle Input](https://adventofcode.com/2023/day/5/input)
* [tylerj GitHub - Code](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2023/day_05.ex)
* [tylerj GitHub - Livebook](https://github.com/tylerj/aoc/blob/main/lib/advent_of_code/2023/day-05.livemd)

## Prompt

### --- Day 5: TBD ---

Part One prompt

**QUESTION ONE?**

To begin, [get your puzzle input](https://adventofcode.com/2023/day/5/input).

<!-- livebook:{"break_markdown":true} -->

### --- Part Two ---

Part Two prompt

**QUESTION TWO?**

Although it hasn't changed, you can still [get your puzzle input](https://adventofcode.com/2023/day/5/input).

## Input

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = input |> Kino.Input.read()
# input = AdventOfCode.Input.get!(5, 2023)
```

<!-- livebook:{"output":true} -->

```
"seeds: 3082872446 316680412 2769223903 74043323 4131958457 99539464 109726392 353536902 619902767 648714498 3762874676 148318192 1545670780 343889780 4259893555 6139816 3980757676 20172062 2199623551 196958359\n\nseed-to-soil map:\n2211745924 1281207339 39747980\n3648083739 2564129012 145170114\n4171944574 2333022880 44675857\n540694760 848661020 78793182\n256996824 588160543 260500477\n1870557289 1804847051 174857657\n3877597859 2853012070 228980636\n1634159465 2150723562 100770342\n3793253853 2293912908 39109972\n652571990 567856215 20304328\n2480343183 3372556760 130573730\n1831144195 528443121 39413094\n0 1690920197 113926854\n3145720856 3081992706 290564054\n624623106 1979704708 27948884\n3844601856 3751059243 32996003\n1260492360 1175075910 106131429\n1366623789 166330978 138490835\n1175000149 927454202 85492211\n696570061 1596389312 94530885\n2647046837 3784055246 498674019\n4216620431 2709299126 78346865\n953230443 1450000160 146389152\n791100946 1012946413 162129497\n1734929807 427093569 96214388\n672876318 403399826 23693743\n113926854 2007653592 143069970\n2045414946 0 166330978\n1099619595 328019272 75380554\n3832363825 4282729265 12238031\n619487942 523307957 5135164\n517497301 304821813 23197459\n2293912908 2377698737 186430275\n1505114624 1320955319 129044841\n2610916913 3714929319 36129924\n3436284910 3503130490 211798829\n4106578495 2787645991 65366079\n\nsoil-to-fertilizer map:\n2733576308 471599794 76965554\n1171423854 1329782324 37554133\n2640052871 928987130 93523437\n2015828352 548565348 204028986\n3562821857 3651707516 643259780\n1208977987 2596877127 12575372\n778871551 2204324824 392552303\n1221553359 2609452499 201089363\n3520687457 3069361301 42134400\n4240454288 3542205804 54513008\n2219857338 1367336457 420195533\n3034988650 3111495701 430710103\n307271757 0 471599794\n1422642722 2082393746 121931078\n3465698753 3596718812 54988704\n0 1022510567 307271757\n1544573800 1787531990 294861756\n4206081637 3034988650 34372651\n1839435556 752594334 176392796\n\nfertilizer-to-water map:\n1807260819 3957534991 337432305\n774926879 2718324291 701236360\n2351569884 1690420176 794087185\n313174888 2484507361 233816930\n3145657069 541109949 949949029\n546991818 313174888 227935061\n2144693124 3750658231 206876760\n4095606098 1491058978 199361198\n1476163239 3419560651 331097580\n\nwater-to-light map:\n3834982820 3688486185 202897824\n2016707141 372287565 116618935\n3386838019 3412408553 81116937\n1125723906 705568567 205087174\n4037880644 1840142480 150018623\n2359176858 4109550629 126312910\n3328178239 4050890849 58659780\n1801115923 3893484758 43944958\n1516002989 1645262885 194879595\n3501845456 488906500 216662067\n1373868013 2223115169 142134976\n3467954956 3641943956 33890500\n1845060881 3937429716 113461133\n3718507523 910655741 57371540\n3315526510 3675834456 12651729\n2936874590 2031117287 84929853\n1710882584 3551710617 90233339\n372287565 2365250145 753436341\n2133326076 968027281 225850782\n1330811080 1990161103 40956184\n1958522014 3493525490 58185127\n3021804443 3118686486 293722067\n2485489768 1193878063 451384822\n3775879063 4235863539 59103757\n1371767264 3891384009 2100749\n4187899267 2116047140 107068029\n\nlight-to-temperature map:\n156743496 2059819668 37694357\n4058204935 4136802755 38991573\n2484168315 1803830764 54458297\n2053264847 2531370441 7735546\n586814267 2539105987 96956250\n2538626612 2097514025 117228608\n4097196508 3782742182 197770788\n1246999413 607900903 25957627\n1877009740 1752361784 30081637\n683770517 3121708332 89729874\n1835387899 343006762 41621841\n1806332066 3242032508 29055833\n2212907940 137512351 205494411\n809588378 2954088675 69458905\n1689902424 3271088341 436818\n3306521233 894737794 308504080\n3235066415 3050253514 71454818\n1147299995 1960120250 99699418\n2046683718 749851354 6581129\n3782742182 4222506720 5456115\n2061000393 756432483 138305311\n792839631 591152156 16748747\n1478425864 2742612115 211476560\n2793367571 2636062237 73608402\n2471831801 2214742633 12336514\n194437853 1622309324 130052460\n3901915150 3980512970 156289785\n2655855220 0 137512351\n324490313 1359985370 262323954\n3855202758 4175794328 46712392\n2445108285 1782443421 21387343\n2467550357 3211438206 4281444" <> ...
```

## Solution

```elixir
defmodule Day05 do
  defdelegate parse(input), to: __MODULE__.Input

  def part1(input) do
    [{seeds_p1, _seed_ranges_p2} | maps] = parse(input)

    seeds_p1
    |> Enum.map(&seed_value(&1, maps))
    |> Enum.min()
  end

  def part2(input) do
    # [{seeds_p1, seed_ranges_p2} | maps] = parse(input)
    parse(input)
  end

  def seed_value(seed, mappings) do
    Enum.reduce(mappings, seed, fn {_type, maps}, seed ->
      Enum.find_value(maps, fn
        {source_range, _dest_range, diff} ->
          if seed in source_range, do: seed + diff

        _ ->
          nil
      end) || seed
    end)
  end

  defmodule Input do
    def parse(input) when is_binary(input) do
      input
      |> String.splitter("\n\n", trim: true)
      |> parse()
    end

    def parse(input) do
      Enum.map(input, &parse_line/1)
    end

    def parse_line("seeds: " <> seeds) do
      seeds =
        seeds
        |> String.split(" ", trim: true)
        |> Enum.map(&String.to_integer/1)

      ranges =
        seeds
        |> Enum.chunk_every(2)
        |> Enum.map(fn [start, size] ->
          start..(start + size - 1)
        end)

      {seeds, Enum.sort(ranges)}
    end

    def parse_line(line) do
      [type | maps] = String.split(line, "\n", trim: true)

      [from, to] = Regex.run(~r/([a-z]+)\-to\-([a-z]+) map:/, type, capture: :all_but_first)

      maps =
        maps
        |> Enum.map(fn m ->
          [dest, source, length] =
            String.split(m, " ", trim: true) |> Enum.map(&String.to_integer/1)

          {
            source..(source + length - 1),
            dest..(dest + length - 1),
            dest - source
          }
        end)
        |> Enum.sort_by(&elem(&1, 1))
        |> then(fn
          [{_, 0.._, _} | _] = ranges ->
            ranges

          [{_, start.._, _} | _] = ranges ->
            range = 0..(start - 1)
            [{range, range, 0} | ranges]
        end)

      {_, _..caboose, _} = Enum.at(maps, -1)

      {{from, to}, List.insert_at(maps, -1, {:end, caboose})}
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Day05, <<70, 79, 82, 49, 0, 0, 12, ...>>,
 {:module, Day05.Input, <<70, 79, 82, ...>>, {:parse_line, 1}}}
```

```elixir
Day05.parse(input)
```

<!-- livebook:{"output":true} -->

```
[
  {[3082872446, 316680412, 2769223903, 74043323, 4131958457, 99539464, 109726392, 353536902,
    619902767, 648714498, 3762874676, 148318192, 1545670780, 343889780, 4259893555, 6139816,
    3980757676, 20172062, 2199623551, 196958359],
   [109726392..463263293, 619902767..1268617264, 1545670780..1889560559, 2199623551..2396581909,
    2769223903..2843267225, 3082872446..3399552857, 3762874676..3911192867, 3980757676..4000929737,
    4131958457..4231497920, 4259893555..4266033370]},
  {{"seed", "soil"},
   [
     {1690920197..1804847050, 0..113926853, -1690920197},
     {2007653592..2150723561, 113926854..256996823, -1893726738},
     {588160543..848661019, 256996824..517497300, -331163719},
     {304821813..328019271, 517497301..540694759, 212675488},
     {848661020..927454201, 540694760..619487941, -307966260},
     {523307957..528443120, 619487942..624623105, 96179985},
     {1979704708..2007653591, 624623106..652571989, -1355081602},
     {567856215..588160542, 652571990..672876317, 84715775},
     {403399826..427093568, 672876318..696570060, 269476492},
     {1596389312..1690920196, 696570061..791100945, -899819251},
     {1012946413..1175075909, 791100946..953230442, -221845467},
     {1450000160..1596389311, 953230443..1099619594, -496769717},
     {328019272..403399825, 1099619595..1175000148, 771600323},
     {927454202..1012946412, 1175000149..1260492359, 247545947},
     {1175075910..1281207338, 1260492360..1366623788, 85416450},
     {166330978..304821812, 1366623789..1505114623, 1200292811},
     {1320955319..1450000159, 1505114624..1634159464, 184159305},
     {2150723562..2251493903, 1634159465..1734929806, -516564097},
     {427093569..523307956, 1734929807..1831144194, 1307836238},
     {528443121..567856214, 1831144195..1870557288, 1302701074},
     {1804847051..1979704707, 1870557289..2045414945, 65710238},
     {0..166330977, 2045414946..2211745923, 2045414946},
     {1281207339..1320955318, 2211745924..2251493903, 930538585},
     {2377698737..2564129011, 2293912908..2480343182, -83785829},
     {3372556760..3503130489, 2480343183..2610916912, -892213577},
     {3714929319..3751059242, 2610916913..2647046836, -1104012406},
     {3784055246..4282729264, 2647046837..3145720855, -1137008409},
     {3081992706..3372556759, 3145720856..3436284909, 63728150},
     {3503130490..3714929318, 3436284910..3648083738, -66845580},
     {2564129012..2709299125, 3648083739..3793253852, 1083954727},
     {2293912908..2333022879, 3793253853..3832363824, 1499340945},
     {4282729265..4294967295, 3832363825..3844601855, -450365440},
     {3751059243..3784055245, 3844601856..3877597858, 93542613},
     {2853012070..3081992705, 3877597859..4106578494, 1024585789},
     {2787645991..2853012069, 4106578495..4171944573, 1318932504},
     {2333022880..2377698736, 4171944574..4216620430, 1838921694},
     {2709299126..2787645990, 4216620431..4294967295, 1507321305},
     {:end, 4294967295}
   ]},
  {{"soil", "fertilizer"},
   [
     {1022510567..1329782323, 0..307271756, -1022510567},
     {0..471599793, 307271757..778871550, 307271757},
     {2204324824..2596877126, 778871551..1171423853, -1425453273},
     {1329782324..1367336456, 1171423854..1208977986, -158358470},
     {2596877127..2609452498, 1208977987..1221553358, -1387899140},
     {2609452499..2810541861, 1221553359..1422642721, -1387899140},
     {2082393746..2204324823, 1422642722..1544573799, -659751024},
     {1787531990..2082393745, 1544573800..1839435555, -242958190},
     {752594334..928987129, 1839435556..2015828351, 1086841222},
     {548565348..752594333, 2015828352..2219857337, 1467263004},
     {1367336457..1787531989, 2219857338..2640052870, 852520881},
     {928987130..1022510566, 2640052871..2733576307, 1711065741},
     {471599794..548565347, 2733576308..2810541861, 2261976514},
     {3111495701..3542205803, 3034988650..3465698752, -76507051},
     {3596718812..3651707515, 3465698753..3520687456, -131020059},
     {3069361301..3111495700, 3520687457..3562821856, 451326156},
     {3651707516..4294967295, 3562821857..4206081636, -88885659},
     {3034988650..3069361300, 4206081637..4240454287, 1171092987},
     {3542205804..3596718811, 4240454288..4294967295, 698248484},
     {:end, 4294967295}
   ]},
  {{"fertilizer", "water"},
   [
     {0..313174887, 0..313174887, 0},
     {2484507361..2718324290, 313174888..546991817, -2171332473},
     {313174888..541109948, 546991818..774926878, 233816930},
     {2718324291..3419560650, 774926879..1476163238, -1943397412},
     {3419560651..3750658230, 1476163239..1807260818, -1943397412},
     {3957534991..4294967295, 1807260819..2144693123, -2150274172},
     {3750658231..3957534990, 2144693124..2351569883, -1605965107},
     {1690420176..2484507360, 2351569884..3145657068, 661149708},
     {541109949..1491058977, 3145657069..4095606097, 2604547120},
     {1491058978..1690420175, 4095606098..4294967295, 2604547120},
     {:end, 4294967295}
   ]},
  {{"water", "light"},
   [
     {0..372287564, 0..372287564, 0},
     {2365250145..3118686485, 372287565..1125723905, -1992962580},
     {705568567..910655740, 1125723906..1330811079, 420155339},
     {1990161103..2031117286, 1330811080..1371767263, -659350023},
     {3891384009..3893484757, 1371767264..1373868012, -2519616745},
     {2223115169..2365250144, 1373868013..1516002988, -849247156},
     {1645262885..1840142479, 1516002989..1710882583, -129259896},
     {3551710617..3641943955, 1710882584..1801115922, -1840828033},
     {3893484758..3937429715, 1801115923..1845060880, -2092368835},
     {3937429716..4050890848, 1845060881..1958522013, -2092368835},
     {3493525490..3551710616, 1958522014..2016707140, -1535003476},
     {372287565..488906499, 2016707141..2133326075, 1644419576},
     {968027281..1193878062, 2133326076..2359176857, 1165298795},
     {4109550629..4235863538, 2359176858..2485489767, -1750373771},
     {1193878063..1645262884, 2485489768..2936874589, 1291611705},
     {2031117287..2116047139, 2936874590..3021804442, 905757303},
     {3118686486..3412408552, 3021804443..3315526509, -96882043},
     {3675834456..3688486184, 3315526510..3328178238, -360307946},
     {4050890849..4109550628, 3328178239..3386838018, -722712610},
     {3412408553..3493525489, 3386838019..3467954955, -25570534},
     {3641943956..3675834455, 3467954956..3501845455, -173989000},
     {488906500..705568566, 3501845456..3718507522, 3012938956},
     {910655741..968027280, 3718507523..3775879062, 2807851782},
     {4235863539..4294967295, 3775879063..3834982819, -459984476},
     {3688486185..3891384008, 3834982820..4037880643, 146496635},
     {1840142480..1990161102, 4037880644..4187899266, 2197738164},
     {2116047140..2223115168, 4187899267..4294967295, 2071852127},
     {:end, 4294967295}
   ]},
  {{"light", "temperature"},
   [
     {1203241874..1359985369, 0..156743495, -1203241874},
     {2059819668..2097514024, 156743496..194437852, -1903076172},
     {1622309324..1752361783, 194437853..324490312, -1427871471},
     {1359985370..1622309323, 324490313..586814266, -1035495057},
     {2539105987..2636062236, 586814267..683770516, -1952291720},
     {3121708332..3211438205, 683770517..773500390, -2437937815},
     {2723272875..2742612114, 773500391..792839630, -1949772484},
     {591152156..607900902, 792839631..809588377, 201687475},
     {2954088675..3023547579, 809588378..879047282, -2144500297},
     {2366671488..2531370440, 879047283..1043746235, -1487624205},
     {1882879349..1960120249, 1043746236..1120987136, -839133113},
     {3215719650..3242032507, 1120987137..1147299994, -2094732513},
     {1960120250..2059819667, 1147299995..1246999412, -812820255},
     {607900903..633858529, 1246999413..1272957039, 639098510},
     {385683332..591152155, 1272957040..1478425863, 887273708},
     {2742612115..2954088674, 1478425864..1689902423, -1264186251},
     {3271088341..3271525158, 1689902424..1690339241, -1581185917},
     {633858530..749851353, 1690339242..1806332065, 1056480712},
     {3242032508..3271088340, 1806332066..1835387898, -1435700442},
     {343006762..384628602, 1835387899..1877009739, 1492381137},
     {1752361784..1782443420, 1877009740..1907091376, 124647956},
     {2227079147..2366671487, 1907091377..2046683717, -319987770},
     {749851354..756432482, 2046683718..2053264846, 1296832364},
     {2531370441..2539105986, 2053264847..2061000392, -478105594},
     {756432483..894737793, 2061000393..2199305703, 1304567910},
     {2709670639..2723272874, 2199305704..2212907939, -510364935},
     {137512351..343006761, 2212907940..2418402350, 2075395589},
     {3023547580..3050253513, 2418402351..2445108284, -605145229},
     {1782443421..1803830763, 2445108285..2466495627, 662664864},
     {384628603..385683331, 2466495628..2467550356, 2081867025},
     {3211438206..3215719649, 2467550357..2471831800, -743887849},
     {2214742633..2227079146, 2471831801..2484168314, 257089168},
     {1803830764..1858289060, 2484168315..2538626611, 680337551},
     {2097514025..2214742632, 2538626612..2655855219, 441112587},
     {0..137512350, 2655855220..2793367570, 2655855220},
     {2636062237..2709670638, 2793367571..2866975972, 157305334},
     {1858289061..1882879348, 2866975973..2891566260, 1008686912},
     {3271525159..3615025312, 2891566261..3235066414, -379958898},
     {3050253514..3121708331, 3235066415..3306521232, 184812901},
     {894737794..1203241873, 3306521233..3615025312, ...},
     {4222506720..4227962834, ...},
     {...},
     ...
   ]},
  {{"temperature", "humidity"},
   [
     {313933177..333555331, 0..19622154, -313933177},
     {0..139752126, 19622155..159374281, 19622155},
     {333555332..489190371, 159374282..315009321, -174181050},
     {709918048..836383357, 315009322..441474631, -394908726},
     {1105730710..1398186166, 441474632..733930088, -664256078},
     {139752127..244119601, 733930089..838297563, 594177962},
     {308559903..313933176, 838297564..843670837, 529737661},
     {1503832016..1851737343, 843670838..1191576165, -660161178},
     {1851737344..1980182259, 1191576166..1320021081, -660161178},
     {489190372..507165486, 1320021082..1337996196, 830830710},
     {836383358..1105730709, 1337996197..1607343548, 501612839},
     {244119602..308559902, 1607343549..1671783849, 1363223947},
     {1980182260..2465956544, 1671783850..2157558134, -308398410},
     {1398186167..1503832015, 2157558135..2263203983, 759371968},
     {507165487..709918047, 2263203984..2465956544, 1756038497},
     {3680388726..3878218680, 2642619819..2840449773, -1037768907},
     {3878218681..4294967295, 2840449774..3257198388, -1037768907},
     {3540623212..3582225975, 3257198389..3298801152, -283424823},
     {3036931949..3067273889, 3298801153..3329143093, 261869204},
     {3067273890..3111757525, 3329143094..3373626729, 261869204},
     {3111757526..3528756127, 3373626730..3790625331, 261869204},
     {2642619819..2795875885, 3790625332..3943881398, 1148005513},
     {2795875886..3036931948, 3943881399..4184937461, 1148005513},
     {3582225976..3680388725, 4184937462..4283100211, 602711486},
     {3528756128..3540623211, 4283100212..4294967295, 754344084},
     {:end, 4294967295}
   ]},
  {{"humidity", "location"},
   [
     {0..229212352, 0..229212352, 0},
     {1429999871..1510857579, 229212353..310070061, -1200787518},
     {1576972154..1843941325, 310070062..577039233, -1266902092},
     {798811837..1065499950, 577039234..843727347, -221772603},
     {1510857580..1576972153, 843727348..909841921, -667130232},
     {1136251469..1405898164, 909841922..1179488617, -226409547},
     {1876630378..2011387411, 1179488618..1314245651, -697141760},
     {402299218..798811836, 1314245652..1710758270, 911946434},
     {1405898165..1429999870, 1710758271..1734859976, 304860106},
     {229212353..402299217, 1734859977..1907946841, 1505647624},
     {1065499951..1136251468, 1907946842..1978698359, 842446891},
     {2011387412..2309869060, 1978698360..2277180008, -32689052},
     {1843941326..1876630377, 2277180009..2309869060, 433238683},
     {3787305627..4242173092, 2718652009..3173519474, -1068653618},
     {2718652009..2795059129, 3173519475..3249926595, 454867466},
     {2795059130..3069033249, 3249926596..3523900715, 454867466},
     {3069033250..3220538747, 3523900716..3675406213, 454867466},
     {4242173093..4294967295, 3675406214..3728200416, -566766879},
     {3220538748..3257372431, 3728200417..3765034100, 507661669},
     {3257372432..3541262101, 3765034101..4048923770, 507661669},
     {3541262102..3787305626, 4048923771..4294967295, 507661669},
     {:end, 4294967295}
   ]}
]
```

**QUESTION ONE?**

Your puzzle answer was `answer one`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day05.part1(input)
```

<!-- livebook:{"output":true} -->

```
84470622
```

**QUESTION TWO?**

Your puzzle answer was `answer two`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ranges = [
  # {"humidity", [0..55], 1},
  # {"temperature", [69..69, 0..54], 2},
  # {"light", [0..44, 77..86], 3},
  # {"water", [0..17, 25..51, 84..93], 4},
  # {"fertilizer", [11..28, 36..52, 53..55, 84..93], 5},
  # {"soil", [84..93], 6},
  # {"seed", [82..91], 7}

  {"humidity", [0..229_212_352], 1},
  {"temperature", [0..139_752_126, 333_555_332..403_393_402], 2},
  {"light", [1_203_241_874..1_342_994_000], 3},
  {"water", [783_086_535..910_655_740, 1_990_161_103..2_002_344_023], 4},
  {"fertilizer", [2_726_483_947..2_854_053_152], 5},
  {"soil", [464_507_433..548_565_347], 6},
  {"seed", [795_671_152..848_661_019, 251_831_945..328_019_271, 848_661_020..856_531_607], 7}
]

find_next_range = fn
  a..b, {_s1.._s2, d1..d2, diff} when d1 <= a and d2 >= b ->
    (a - diff)..(b - diff)

  a..b, {_s1..s2, _d1..d2, _} when d2 in a..b ->
    adj = d2 - a
    max(s2 - adj, 0)..s2

  a..b, {s1.._s2, d1.._d2, _} when d1 in a..b ->
    adj = b - d1
    s1..(s1 + adj)

  a..b, {:end, caboose} when a > caboose ->
    a..b

  _, _ ->
    nil
end

Day05.part2(input)
|> Enum.reverse()
|> Enum.at(6)
|> elem(1)
# |> Enum.filter(fn {_source_range, dest_range, _diff} ->
#   not Range.disjoint?(dest_range, 0..139752126)
# end)
|> Enum.map(&find_next_range.(464_507_433..548_565_347, &1))
|> Enum.reject(&is_nil/1)
```

<!-- livebook:{"output":true} -->

```
[795671152..848661019, 251831945..328019271, 848661020..856531607]
```

Need to find the only part of the source range that truly overlaps with the desired destination range.

Consider the desired destination range of `313933177..333555331`

The `dest_range` of `194437853..324490312` in the `{source_range, dest_range, diff}` value of:

```
{1622309324..1752361783, 194437853..324490312, _}
```

overlaps with `313933177..333555331`, but only from `313933177` to `324490312`.

Therefore, we should change to allowed source_range accordingly, to become:

```
{1741804648..1752361783, 313933177..324490312, _}
```

```elixir
[{seeds_p1, seed_ranges_p2} | maps] = Day05.parse(input)

{
  Day05.seed_value(795_671_152, maps),
  Day05.seed_value(802_763_513, maps),
  Day05.seed_value(848_661_019, maps),
  Day05.seed_value(251_831_945, maps),
  Day05.seed_value(328_019_271, maps),
  Day05.seed_value(848_661_020, maps),
  Day05.seed_value(856_531_607, maps)
}

# seed_ranges_p2 |> Enum.any?(fn range -> 328019271 in range end)
```

<!-- livebook:{"output":true} -->

```
{2978837264, 26714516, 72612022, 4154147077, 95809481, 95809482, 103680069}
```

Both parts of this puzzle are complete! They provide two gold stars: **

At this point, you should [return to your Advent calendar](https://adventofcode.com/2023) and try another puzzle.

If you still want to see it, you can [get your puzzle input](https://adventofcode.com/2023/day/5/input).

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Day05Test do
  use ExUnit.Case, async: false

  setup_all do
    [
      input: ""
    ]
  end

  describe "part1/1" do
    test "returns expected value", %{input: input} do
      assert Day05.part1(input) == [""]
    end
  end

  describe "part2/1" do
    test "returns expected value", %{input: input} do
      assert Day05.part2(input) == [""]
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..
Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 162351
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```

## Benchmarking

```elixir
# https://github.com/bencheeorg/benchee
Benchee.run(
  %{
    "Part 1" => fn -> Day05.part1(input) end,
    "Part 2" => fn -> Day05.part2(input) end
  },
  memory_time: 2,
  reduction_time: 2
)

nil
```

<!-- livebook:{"output":true} -->

```

```

<!-- livebook:{"output":true} -->

```
nil
```
